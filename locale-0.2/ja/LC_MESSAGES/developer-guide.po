# Copyright (C) 2019 releng-tool
# This file is distributed under the same license as the releng-tool
# package.
#
msgid ""
msgstr ""
"Project-Id-Version: releng-tool \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-22 02:00-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../.releng_cache/releng-tool/Documentation/developer-guide.rst:2
msgid "developer guide"
msgstr "開発者ガイド"

#: ../.releng_cache/releng-tool/Documentation/developer-guide.rst:4
msgid ""
"The following will outline details on how to prepare a releng-tool "
"project to be used to assist the release engineering of a project. For "
"details on a user interaction with releng-tool, consult the :doc:`user's "
"guide <user-guide>`."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:2
msgid "prelude"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:4
msgid ""
"A releng-tool project can define multiple packages, each can be based off"
" of different languages, configured to use custom toolchains and more. "
"Every package has multiple stages (such as fetching, configuring, "
"building, etc.) which can help contribute to target sysroot. Once all "
"packages are processed, the target sysroot can be packaged for "
"distribution."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:10
msgid ""
"The following outlines the (default) common directory/file locations for "
"a releng-tool project:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:13
msgid "``cache/`` - cached content from select package sources (e.g. dvcs, etc.)"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:14
msgid ""
"``dl/`` - archives for select package sources (e.g. ``.tgz``, ``.zip``, "
"etc.)"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:15
msgid "``package/`` - container for packages"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:16
msgid "``package/<package>/`` - a package-specific folder"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:17
msgid "``package/<package>/<package>`` - a package definition"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:18
msgid "``output/`` - container for all output content"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:19
msgid "``output/build/`` - container for package building"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:20
msgid "``output/host/`` - area to hold host-specific content"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:21
msgid "``output/images/`` - container for final images/archives"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:22
msgid "``output/staging/`` - area to hold staged sysroot content"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:23
msgid "``output/target/`` - area to hold target sysroot content"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:24
msgid "``releng`` - project configuration"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:26
msgid ""
"How these directories and files are used can vary on how a developer "
"defines a releng-tool project. Consider the following example:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:29
msgid ""
"releng-tool will load the project's configuration and respective package "
"definitions to determine what steps need to be performed."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:31
msgid ""
"Package sources can be downloaded into either the ``cache/`` or ``dl/`` "
"folder, depending on what type of sources will be fetched. For example, "
"Git sources will be stored inside of the ``cache/`` to take advantage of "
"its distributable nature, and archive files (such as ``.tgz``, ``.zip``, "
"etc.) will be stored inside the ``dl/`` directory."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:36
msgid ""
"Each package will be extracted into its own output directory inside "
"``output/build/``. The working areas for packages allow a package to be "
"patched, configured and built based on how the developer configures the "
"respective packages."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:40
msgid ""
"Once packages are built, their final executables, libraries, etc. can be "
"installed into either the host area (``output/host/``), staging area "
"(``output/staging/``) or the target area (``output/target/``) depending "
"on what has been built. The target area is designed for the final set of "
"assets produced from a build; the intent is that the files contained "
"inside this folder are planned to be used on a target system (stripped, "
"cross-compiled, etc.). A staging area is like a target area but may "
"contain more content such as headers not intended for a final target, "
"interim development assets, and more. Host content is designed for "
"content built for the host system which other packages may depend on."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:50
msgid ""
"At the end of the releng-tool process, a post-stage script can be invoked"
" to help archive/package content from the target area "
"(``output/target/``) into the images folder (``output/images/``). For "
"example, generating an archive ``output/images/my-awesome-"
"project-v1.0.0.tgz``."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:55
msgid ""
"Not all projects may use each of these folders or take advantage of each "
"stage. While various capabilities exist, it does not mean releng-tool "
"will handle all the nitty-gritty details to make a proper build of a "
"project. For example:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:59
msgid ""
"If a developer wishes to cross-compile a package to a target, they must "
"ensure the package is configured in the proper manner to use a desired "
"toolchain."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:61
msgid ""
"If a developer wants to process a Python package, they must ensure the "
"proper interpreter is used if they cannot rely on the host's default "
"interpreter."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:63
msgid ""
"If a developer develops script-based packages, they must ensure that "
"these scripts properly handle multiple re-invokes (e.g. if a builder "
"performs a rebuild on a package)."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/prelude:67
msgid ""
"releng-tool will attempt to provide an easy way to deal with fetching "
"sources, ensuring projects are invoked in order, and more; however, the "
"more advanced features/actions a developer may want in their release "
"engineering (like the examples above), the more a developer will need to "
"manage in their project."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/getting-started:2
msgid "getting started"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/getting-started:4
msgid ""
"releng-tool is made on Python. This document will outline package "
"definitions, scripts and more which are most likely Python scripts, and "
"in turn will be invoked/processed by the releng-tool. While releng-tool "
"supports running on various host systems (e.g. Linux, OS X, Windows, "
"etc.), this guide will primarily show examples following a Unix-styled "
"file system."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/getting-started:10
msgid ""
"The following will provide a very simple script-based project solution to"
" get started. This example will make a project with two packages, setup a"
" dependency between them and setup scripts to help show a developer how "
"packages are processed. If there is no desire to make a simple project "
"example, one may venture to the `actually getting started`_ section."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/getting-started:16
msgid ""
"To start, make a new folder for the project, two sample packages and move"
" into the root folder:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/getting-started:25
msgid ""
"Inside the ``libx`` project, the package definition and script-based "
"files will be created. First, build the package definition ``my-"
"project/libx/libx`` with the following content:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/getting-started:36
msgid ""
"Next, create a build script for the ``libx`` project ``my-project/libx"
"/libx-build`` with the following content:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/getting-started:46
msgid ""
"This is a very simple script-based package (all package options explained"
" later in this document). Repeat the same steps for the ``liby`` package "
"with the file ``my-project/liby/liby`` containing:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/getting-started:58
msgid "And ``my-project/liby/libx-build`` containing:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/getting-started:67
msgid ""
"One difference with this package is the definition of "
"``LIBY_DEPENDENCIES``, which tells releng-tool to ensure that ``libx`` "
"package is processed before ``liby``."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/getting-started:71
msgid ""
"With this minimal set of packages, the project's releng-tool "
"configuration can now be created. At the root of the project folder, "
"create a ``releng`` configuration file with the following contents:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/getting-started:85
msgid ""
"This sample project should be ready for a spin. While in the ``my-"
"project`` folder, invoke ``releng-tool``:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/getting-started:104
msgid ""
"This above output shows that the ``libx`` package's stage are invoke "
"followed by ``liby`` package's stages. For the build stage in each "
"package, each respective package script has been invoked. While this "
"example only prints a message, more elaborate scripts can be made to "
"handle a package's source to build."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/getting-started:109
msgid "To clean the project, a ``releng-tool clean`` request can be invoked:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/getting-started:115
msgid ""
"Now the project is in a state again to perform a fresh build. This "
"concludes the initial getting started example. Feel free to remove the "
"example project and prepare for steps to make a real releng-tool project."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/actually-getting-started:2
msgid "actually getting started"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/actually-getting-started:4
msgid ""
"Start building a new releng-tool project by creating the following root "
"and package folders for a project, and venture into the root folder:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/actually-getting-started:12
msgid ""
"Inside the root folder, create a releng-tool configuration file "
"``releng`` with the following skeleton content:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/actually-getting-started:23
msgid ""
"This configuration defines a releng-tool project with no packages. Start "
"to change this by adding a package or more for each a module to be built "
"in the release engineering process. For example, packages can be "
"individual static libraries, simple asset fetching (e.g. image/document "
"downloading) and more."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/actually-getting-started:28
msgid ""
"For each package, create a new folder inside ``<my-project>/package`` to "
"represent the package."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/actually-getting-started:35
msgid ""
"Inside each newly created package, create a package definition file. This"
" (Python-based) file will be named with the same name as the package "
"folder (i.e. ``<my-project>/package/<my-package>/<my-package>``). An "
"initial skeleton structure for the definition file is as follows:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/actually-getting-started:52
msgid "Initial changes to note:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/actually-getting-started:54
msgid ""
"For a package, any support package variable requires the package name as "
"a prefix. The prefix should be a underscore-separated all-uppercase "
"string value. In the above example, if the package name was ``my-"
"package``, the prefix will be ``MY_PACKAGE_``."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/actually-getting-started:58
msgid ""
"One of the most important options is the version option "
"(``MY_PACKAGE_VERSION``). This value is used to help manage downloaded "
"asset names, build output directories and sometimes even revision values "
"for source-fetching. An example of a good version value is '1.0'; "
"however, the value can vary depending on the package being defined."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/actually-getting-started:63
msgid ""
"The site value (``MY_PACKAGE_SITE``) is used to identify where "
"source/assets can be fetched from. A site can be a Git repository, a URL,"
" SCP location, a site value supported by a custom fetch extension or "
"more."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/actually-getting-started:66
msgid ""
"A helpful configuration option is the dependency list "
"(``MY_PACKAGE_DEPENDENCIES``). If a package depends on another package "
"being built, the name of the package should be listed in this option. "
"This ensures that releng-tool will invoke package stages in the "
"appropriate order."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/actually-getting-started:70
msgid ""
"While not required, it is recommended to provide license tracking for "
"packages when possible. ``MY_PACKAGE_LICENSE`` and "
"``MY_PACKAGE_LICENSE_FILES`` are list values to define the list of "
"licenses applicable to this package and the location of the respective "
"license files found in the sources. A developer can exclude these options"
" if desired. If a developer does provide these options, the end of the "
"build process will compile a document of used licenses for the project."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/actually-getting-started:77
msgid ""
"The type of package (``MY_PACKAGE_TYPE``) can be used to take advantage "
"of various package types supported by releng-tool. By default, packages "
"are script-based, where Python scripts inside the packages are invoked "
"during each stage (e.g. ``<my-project>/package/build`` would be invoked "
"during the build phase). releng-tool also supports other package types "
"such as autotools, CMake and more to limit the need to define custom "
"scripts for common build steps. Developers can also use package types "
"defined by included extensions (if any)."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/actually-getting-started:85
msgid ""
"A detailed list of options can be found in `common package "
"configurations`_ and `advanced package configurations`_."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/actually-getting-started:88
msgid ""
"Once all packages have been prepared with desired package definitions "
"options, the root configuration script (``releng``) should be updated to "
"indicate which packages should be built. All packages can be defined in "
"the ``packages`` list if desired. For example, if a project has packages "
"``liba``, ``libb`` and ``programc``, the following package list can be "
"defined:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/actually-getting-started:102
msgid ""
"Note that a developer does not need to explicitly add each component if "
"dependencies are configured. Considering the same packages listed above, "
"if ``programc`` depends on both ``liba`` and ``libb`` packages, only "
"``programc`` needs to be explicitly listed:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/actually-getting-started:113
msgid ""
"When processing, both ``liba`` and ``libb`` packages will be implicitly "
"loaded and processed like any other package."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/actually-getting-started:116
msgid ""
"Once all the project's packages are ready, a developer can try their luck"
" by attempting to perform the release engineering process:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/actually-getting-started:123
msgid ""
"A developer may not have luck on the first go. Tweaks may be needed on "
"the package definitions, custom scripts (if used) and issues found in "
"sources. A developer may invoke ``releng-tool`` multiple times to attempt"
" to continue the build process for a project. A developer may wish to use"
" the ``clean`` option to remove an existing extracted sources/partially "
"built sources:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/actually-getting-started:133
msgid ""
"Or start from a completely fresh state using ``mrproper`` to remove any "
"built images and file mode flags:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/actually-getting-started:140
msgid "There may also be times if a single project needs to be cleaned:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/actually-getting-started:146
msgid "Consult the :doc:`user's guide <user-guide>` for more action information."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/actually-getting-started:148
msgid ""
"Eventually the project should be in a good state that each package is "
"being built as expected. Now a user can decide on what to do with the "
"resulting files. After the invoke of a releng-tool process, it is typical"
" for final binaries, public includes, etc. to be found inside the "
"``<root>/output/target`` directory. If a developer only desires to "
"manually take the assets from this folder and distribute/store them, no "
"additional steps are required. However, it may be common that a developer"
" wants to package some assets (whether it be a tar/zip/etc. container, "
"pkg/rpm/etc. package or more). A developer could deal with such a "
"capability outside the releng-tool process; but if a developer wishes to "
"hook the end of the process, a post-processing script can be used."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/actually-getting-started:159
msgid ""
"A developer may create a post-processing file ``releng-post`` in the root"
" directory. On the completion of processing each package, the post-"
"processing script will be invoked. It is important to note that the post-"
"processing script may be invoked multiple times if a user attempts to "
"rebuild the project. For example, if the file ``releng-post`` has the "
"following contents:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/actually-getting-started:172
msgid ""
"The target directory will be output to standard out at the end of the "
"build. A developer may wish to define their own Python script to decide "
"on how to package the contents found in ``TARGET_DIR`` (see also `script "
"helpers`_ for helper variables/functions)."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:2
msgid "releng configuration"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:4
msgid ""
"A releng-tool project defines its configuration options inside the a "
"``releng`` file at the root of a project. The primary configuration "
"option for a developer to define is ``packages``, which is used to hold a"
" list of packages to be processed:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:20
msgid ""
"A series of additional configuration options are available to be defined "
"inside the project's configuration. A list of common configuration "
"options are as follows:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:27
msgid "``default_internal``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:27
msgid ""
"A flag to indicate that projects are implicitly loaded as internal "
"projects. By default, packages not explicitly configured as internal or "
"external are assumed to be external packages."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:82
#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:283
#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:336
#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:36
msgid "See also `internal and external packages`_."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:38
msgid "``extensions``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:38
msgid ""
"A list of extensions to load before processing a releng-tool project. If "
"an extension cannot be loaded, the release engineering process will fail "
"with detailed information."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:50
msgid "See also `loading extensions`_."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:52
msgid "``external_packages``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:52
msgid ""
"A list of external package locations. By default, packages for a project "
"will be searched for in root directory's package folder "
"(``<root>/package``). In some build environments, some packages may be "
"required or may be preferred to be located in another "
"location/repository. To allow packages to be loaded from another package "
"container directory, one or more package locations can be provided. For "
"example:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:70
msgid "``license_header``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:70
msgid ""
"As the releng-tool build process is finalized, a license document can be "
"generated containing each package's license information. If a developer "
"wishes to add a custom header to the generated document, a header can be "
"defined by project's configuration. For example:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:20
#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:81
msgid "See also `licenses`_."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:83
msgid "``packages``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:83
msgid ""
"A list of packages to process. Packages listed will be processed by "
"releng-tool till their completion. Package dependencies not explicitly "
"listed will be automatically loaded and processed as well."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:99
msgid "``sysroot_prefix``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:99
msgid ""
"Define a custom sysroot prefix to provide to packages during their "
"configuration, build and installation stages. By default, the sysroot "
"prefix is set to ``/usr``."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:108
msgid "See also |LIBFOO_PREFIX|_."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:110
msgid "``url_mirror``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:110
msgid ""
"Specifies a mirror base site to be used for URL fetch requests. If this "
"option is set, any URL fetch requests will first be tried on the "
"configured mirror before attempting to acquired from the defined site in "
"a package definition."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:125
msgid "A list of more advanced configuration options are as follows:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:128
msgid "``cache_ext``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:128
msgid ""
"A transform for cache extension interpreting. This is an advanced "
"configuration and is not recommended for use except for special use cases"
" outlined below."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:133
msgid ""
"When releng-tool fetches assets from remote sites, the site value can "
"used to determine the resulting filename of a cached asset. For example, "
"downloading an asset from ``https://example.org/my-file.tgz``, the "
"locally downloaded file will result in a ``.tgz`` extension; however, not"
" all defined sites will result in an easily interpreted cache extension. "
"While releng-tool will attempt its best to determine an appropriate "
"extension value to use, some use cases may not be able to be handled. To "
"deal with these cases, a developer can define a transform method to help "
"translate a site value into a known cache extension value."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:149
msgid ""
"Consider the following example: a host is used to acquire assets from a "
"content server. The URI to download an asset uses a unique request format"
" ``https://static.example.org/fetch/25134``. releng-tool may not be able "
"to find the extension for the fetched asset, but if a developer knows the"
" expected archive types for these calls, a custom transform can be "
"defined. For example:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:169
msgid ""
"The above transform indicates that all packages using the "
"``static.example.org`` site will be ``tgz`` archives."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:173
msgid "``override_extract_tools``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:173
msgid ""
"A dictionary to be provided to map an extension type to an external tool "
"to indicate which tool should be used for extraction. For example, when a"
" ``.zip`` archive is being processed for extraction, releng-tool will "
"internally extract the archive; however, a user may wish to override this"
" tool with their own extraction utility. Consider the following example:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:188
#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:216
#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:240
msgid ""
"Note that the use of an override option should only be used in special "
"cases (see also |CONF_OVERRIDES|)."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:192
msgid "``override_revisions``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:192
msgid ""
"Allows a dictionary to be provided to map a package name to a new "
"revision value. Consider the following example: a project defines "
"``module-a`` and ``module-b`` packages with package ``module-b`` "
"depending on package ``module-a``. A developer may be attempting to tweak"
" package ``module-b`` on the fly to test a new capabilities against the "
"current stable version of ``module-a``; however, the developer does not "
"want to explicitly change the revision inside package ``module-b``'s "
"definition. To avoid this, an override can be used instead:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:211
msgid ""
"The above example shows that package ``module-b`` will fetch using a test"
" branch instead of what is defined in the actual package definition."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:220
msgid "``override_sites``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:220
msgid ""
"A dictionary to be provided to map a package name to a new site value. "
"There may be times where a host may not have access to a specific package"
" site. To have a host to use a mirror location without having to adjust "
"the package definition, the site override option can be used. For "
"example, consider a package pulls from site "
"``git@example.com:myproject.git``; however, the host ``example.com`` "
"cannot be access from the host machine. If a mirror location has been "
"setup at ``git@example.org:myproject.git``, the following override can be"
" used:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:246
msgid "``quirks``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:246
msgid ""
"A list of configuration quirks to apply to deal with rare corner case "
"scenarios which can prevent releng-tool operating on a host system."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/releng-py:256
msgid "For a list of available quirks, please consult `quirks`_."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:2
msgid "environment variables"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:4
msgid ""
"When packages and the post-processing event are processed, the following "
"environment variables will be made available:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:8
msgid "``BUILD_DIR``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:8
msgid "The build directory."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:10
msgid "``CACHE_DIR``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:10
msgid "The cache directory."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:12
msgid "``DL_DIR``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:12
msgid "The download directory."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:14
msgid "``HOST_DIR``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:14
#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:70
msgid "The host directory."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:16
msgid "``IMAGES_DIR``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:16
#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:71
msgid "The images directory."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:18
msgid "``LICENSE_DIR``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:18
msgid "The licenses directory."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:24
msgid "``NJOBS``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:24
msgid ""
"Number of calculated jobs to allow at a given time. Unless explicitly set"
" by a system builder on the command line, the calculated number of jobs "
"should be equal to the number of physical cores on the host. When "
"building a specific package and the package overrides the number of jobs "
"to use, the package-defined count will be used instead. This "
"configuration will always be a value of at least one (1)."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:36
msgid "``NJOBSCONF``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:36
msgid ""
"Number of jobs to allow at a given time. Unlike |CONF_NJOBS|_, "
"``NJOBSCONF`` provides the requested configured number of jobs to use. "
"The value may be set to zero (0) to indicate an automatic detection of "
"jobs to use. This can be useful for tools which have their own automatic "
"job count implementation and do not want to rely on the value defined by "
"|CONF_NJOBS|_. When building a specific package and the package overrides"
" the number of jobs to use, the package-defined count will be used "
"instead."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:48
msgid "``OUTPUT_DIR``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:48
msgid "The output directory."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:52
msgid "``PKG_BUILD_DIR``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:52
msgid "The directory for a specific package's buildable content."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:55
msgid "See also |CONF_PKG_BUILD_ODIR|_."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:59
msgid "``PKG_BUILD_OUTPUT_DIR``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:59
msgid "The directory for where a package's build output will be stored."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:62
msgid "See also |CONF_PKG_BUILD_DIR|_."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:64
msgid "``PKG_CACHE_FILE``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:64
msgid ""
"The location of the cache file for a package. If package defines a fetch "
"of an archive from a remote source, after the fetch stage is completed, "
"the archive can be found in this location. For example, if a package "
"defines a site ``https://www.example.com/test.tgz``, the resulting catch "
"file may be ``<root>/output/dl/test-1.0.tgz``."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:73
msgid "``PKG_DEFDIR``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:73
msgid ""
"The package's definition directory. For example, for a package ``test``. "
"the definition directory would be ``<root>/package/test``."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:77
msgid "``PKG_INTERNAL``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:77
msgid ""
"Whether or not the package is considered \"internal\". If internal, the "
"environment variable will be set to a value of one (i.e. "
"``PKG_INTERNAL=1``)."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:84
msgid "``PKG_NAME``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:84
#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:138
msgid "The name of the package."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:86
msgid "``PKG_REVISION``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:86
msgid "The site revision of the package."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:88
msgid "See also |LIBFOO_REVISION|_."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:90
msgid "``PKG_SITE``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:90
msgid "The site of the package."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:92
msgid "See also |LIBFOO_SITE|_."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:94
msgid "``PKG_VERSION``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:94
msgid "The version of the package."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:96
msgid "See also |LIBFOO_VERSION|_."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:98
msgid "``PREFIX``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:98
msgid "The sysroot prefix for the package."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:100
msgid "``RELENG_DEVMODE``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:100
msgid "Flag set if in :ref:`development mode`."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:102
msgid "``RELENG_LOCALSRCS``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:102
msgid "Flag set if in :ref:`local-sources mode`."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:104
msgid "``RELENG_REBUILD``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:104
msgid "Flag set if performing a re-build request."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:106
msgid "``RELENG_RECONFIGURE``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:106
msgid "Flag set if performing a re-configuration request."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:109
msgid "``RELENG_REINSTALL``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:109
msgid "Flag set if performing a re-install request."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:111
msgid "``ROOT_DIR``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:111
msgid "The root directory."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:113
msgid "``STAGING_DIR``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:113
msgid "The staging area directory."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:115
msgid "``SYMBOLS_DIR``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:115
msgid "The symbols area directory."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:117
msgid "``TARGET_DIR``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:117
msgid "The target area directory."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:125
msgid ""
"Package-defined environment variables are also available in the rare "
"chance that package content needs to be mangled (e.g. including a "
"dependent module which does not properly support a sysroot staged "
"environment). The following package-defined environment variables are "
"available for use (where ``<PKG>`` translates to a releng-tool's "
"determined package key):"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:132
msgid "``<PKG>_BUILD_DIR``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:132
msgid "The directory for a defined package's buildable content."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:135
msgid "``<PKG>_BUILD_OUTPUT_DIR``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:135
msgid "The directory for where a defined package's build output will be stored."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:138
msgid "``<PKG>_NAME``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:140
msgid "``<PKG>_REVISION``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:140
msgid "The revision of a defined package."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:142
msgid "``<PKG>_VERSION``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:142
msgid "The version of a defined package."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/environment:145
msgid ""
"Note that is it not recommended to define environment variables for the "
"releng-tool process to use outside the project definition except for "
"special cases (such as authentication tokens, etc.). Attempting to "
"configure, for example, compiler flags outside the project definition "
"circumvents configuration control a releng-tool project aims to maintain."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:2
msgid "packages"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:4
msgid ""
"Packages are defined inside the ``package/`` directory. There is no "
"explicit limit on the total number of packages a project can have. "
"Packages can consist of libraries, programs or even basic assets. Package"
" names are recommended to be lower-case with dash-separated (``-``) "
"separators (if needed). For example, ``package-a`` is recommended over "
"``PackageA`` or ``package_a``; however, the choice is up to the developer"
" making the releng-tool project."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:11
msgid ""
"When making a package, a container folder for the package as well as a "
"package definition file needs to be made. For example, if the package is "
"``package-a``, the file ``package/package-a/package-a`` should exist. "
"Package definition files are Python-based, thus the following leading "
"header is recommended:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:21
msgid ""
"Inside the definition file, a series of configuration options can be set "
"to tell releng-tool how to work with the defined package. Each option is "
"prefixed with a variable-safe variant of the package name. The prefix "
"value will be an uppercase string based on the package name with special "
"characters converted to underscores. For example, ``package-a`` will have"
" a prefix ``PACKAGE_A_``. For a package to take advantage of a "
"configuration option, the package definition will add a variable entry "
"with the package's prefix followed by the supported option name. "
"Considering the same package with the name ``package-a`` (and prefix "
"``PACKAGE_A_``), to use the |LIBFOO_VERSION|_ configuration option, the "
"following can be defined (``PACKAGE_A_VERSION``):"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:39
msgid "More details on available configuration options are as follows."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:42
msgid "common package configurations"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:44
msgid ""
"The following outlines common configuration options available for "
"packages."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:47
msgid "LIBFOO_DEPENDENCIES"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:49
msgid ""
"List of package dependencies a given project has. If a project depends on"
" another package, the package name should be listed in this option. This "
"ensures releng-tool will process packages in the proper order. The "
"following shows an example package ``libc`` being dependent on ``liba`` "
"and ``libb`` being processed first:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:60
msgid "LIBFOO_INSTALL_TYPE"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:62
msgid ""
"Defines the installation type of this package. A package may be designed "
"to be built and installed for just the target area, the stage area, both "
"or maybe in the host directory. The following options are available for "
"the installation type:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:68
#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:135
#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:180
msgid "type"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:68
msgid "description"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:70
msgid "``host``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:71
msgid "``images``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:72
msgid "``staging``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:72
msgid "The staging area."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:73
msgid "``staging_and_target``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:73
msgid "Both the staging an target area."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:74
msgid "``target``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:74
msgid "The target area."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:77
msgid "The default installation type is ``target``."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:84
msgid "LIBFOO_LICENSE"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:87
msgid ""
"A string or list of strings outlining the license information for a "
"package. Outlining the license of a package is always recommended (but "
"not required)."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:94
#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:118
msgid "or"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:100
msgid "See also |LIBFOO_LICENSE_FILES|_."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:103
msgid "LIBFOO_LICENSE_FILES"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:106
msgid ""
"A string or list of strings identifying the license files found inside "
"the package sources which match up to the defined ``LICENSE`` entries "
"(respectively). Listing the license(s) of a package is always recommended"
" (but not required)."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:124
msgid "See also |LIBFOO_LICENSE|_."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:127
msgid "LIBFOO_SITE"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:130
msgid ""
"The site where package sources/assets can be found. The site can be a URL"
" of an archive, or describe a source control URL such as Git or SVN. The "
"following outline a series of supported site definitions:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:135
msgid "prefix/postfix"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:137
msgid "Bazaar"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:137
msgid "``bzr+``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:138
msgid "CVS"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:138
msgid "``cvs+``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:139
msgid "Git"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:139
msgid "``git+`` or ``.git``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:140
msgid "Mercurial"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:140
msgid "``hg+``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:141
msgid "SCP"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:141
msgid "``scp+``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:142
msgid "SVN"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:142
msgid "``svn+``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:143
msgid "URL"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:143
msgid "`(wildcard)`"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:146
msgid "Examples include:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:155
msgid ""
"A developer can also use |LIBFOO_VCS_TYPE|_ to explicitly define the "
"version control system type without the need for a prefix/postfix entry."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:158
msgid ""
"For more information on each type's formatting, consult :ref:`site "
"definitions <site_definitions>`."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:161
msgid ""
"Using a specific type will create a dependency for a project that the "
"respective host tool is installed on the host system. For example, if a "
"Git site is set, the host system will need to have ``git`` installed on "
"the system."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:165
msgid ""
"If no site is defined for a package, it will be considered a virtual "
"package (i.e. has no content). If applicable, loaded extensions may "
"provide support for custom site protocols."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:169
msgid "See also |LIBFOO_VCS_TYPE|_."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:172
msgid "LIBFOO_TYPE"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:175
msgid ""
"The package type. The default package type is a (Python) script-based "
"package; however, releng-tool also provides a series of helper package "
"types for common frameworks. The following outline a series of supported "
"site definitions:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:180
msgid "value"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:182
msgid "Autotools"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:182
msgid "``autotools``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:183
msgid "CMake"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:183
msgid "``cmake``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:184
msgid "Python"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:184
msgid "``python``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:185
msgid "Script"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:185
msgid "``script``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:188
msgid "For example:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:194
msgid ""
"If no type is defined for a package, it will be considered a script-based"
" package. If applicable, loaded extensions may provide support for custom"
" site protocols."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:198
msgid ""
"Using a specific type will create a dependency for a project that the "
"respective host tool is installed on the host system. For example, if a "
"CMake type is set, the host system will need to have ``cmake`` installed "
"on the system."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:203
msgid "LIBFOO_VERSION"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:206
msgid ""
"The version of the package. Typically the version value should be "
"formatted in a semantic versioning style; however, it is up to the "
"developer to decide the best version value to use for a package. It is "
"important to note that the version value is used to determine build "
"output folder names, cache files and more."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:215
msgid ""
"For some VCS types, the version value will be used to acquire a specific "
"revision of sources. If for some case the desired version value cannot be"
" gracefully defined (e.g. ``libfoo-v1.0`` will produce output directories"
" such as ``libfoo-libfoo-v1.0``), |LIBFOO_REVISION|_ can be used."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:220
msgid "See also |LIBFOO_DEVMODE_REVISION|_ and |LIBFOO_REVISION|_."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:223
msgid "advanced package configurations"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:225
msgid ""
"The following outlines more advanced configuration options available for "
"packages."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:229
msgid "LIBFOO_BUILD_SUBDIR"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:231
msgid ""
"Sub-directory where a package's extracted sources holds its buildable "
"content. Sources for a package may be nested inside one or more "
"directories. A package can specify the sub-directory where the "
"configuration, build and installation processes are invoked from."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:241
msgid "LIBFOO_DEVMODE_REVISION"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:244
msgid ""
"Specifies a development revision for a package. When a project is being "
"built in :ref:`development mode`, the development revision is used over "
"the configured |LIBFOO_REVISION|_ value. If a development revision is not"
" defined for a project, a package will still use the configured "
"|LIBFOO_REVISION|_ while in development mode."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:254
msgid "See also |LIBFOO_REVISION|_ and |LIBFOO_VERSION|_."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:257
msgid "LIBFOO_EXTENSION"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:259
msgid ""
"Specifies a filename extension for the package. A package may be cached "
"inside the download directory to be used when the extraction phase is "
"invoked. releng-tool attempts to determine the most ideal extension for "
"this cache file; however some cases the detected extension may be "
"incorrect. To deal with this situation, a developer can explicitly "
"specify the extension value using this option."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:271
msgid "LIBFOO_EXTERNAL"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:274
msgid ""
"Flag value to explicitly indicate that a package is an external package. "
"External packages will generate warnings if :ref:`hashes <hash_files>` or"
" `licenses`_ are missing. By default, packages are considered external "
"unless explicitly configured to be internal."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:286
msgid "LIBFOO_EXTOPT"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:288
msgid ""
"Specifies extension-specific options. Packages wishing to take advantage "
"of extension-specific capabilities can forward options to extensions by "
"defining a dictionary of values."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:300
msgid "LIBFOO_EXTRACT_TYPE"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:302
msgid ""
"Specifies a custom extraction type for a package. If a configured "
"extension supports a custom extraction capability, the registered "
"extraction type can be explicitly registered in this option."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:311
msgid "LIBFOO_FIXED_JOBS"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:313
msgid ""
"Explicitly configure the total number of jobs a package can use. The "
"primary use case for this option is to help limit the total number of "
"jobs for a package that cannot support a large or any parallel build "
"environment."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:322
msgid "LIBFOO_INTERNAL"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:325
msgid ""
"Flag value to explicitly indicate that a package is an internal package. "
"Internal packages will not generate warnings if :ref:`hashes "
"<hash_files>` or `licenses`_ are missing. When configured in :ref:`local-"
"sources mode`, package sources are searched for in the local directory "
"opposed to site fetched sources. By default, packages are considered "
"external unless explicitly configured to be internal."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:339
msgid "LIBFOO_PREFIX"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:342
msgid ""
"Specifies the sysroot prefix value to use for the package. An explicitly "
"provided prefix value will override the project-defined or default "
"sysroot prefix value."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:350
msgid "See also |CONF_SYSROOT_PREFIX|_."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:353
msgid "LIBFOO_REVISION"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:356
msgid ""
"Specifies a revision value for a package. When a package fetches content "
"using source management tools, the revision value is used to determine "
"which sources should be acquired (e.g. a tag). If a revision is not "
"defined package, a package will use the configured |LIBFOO_VERSION|_."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:365
msgid "See also |LIBFOO_DEVMODE_REVISION|_ and |LIBFOO_VERSION|_."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:368
msgid "LIBFOO_STRIP_COUNT"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:370
msgid ""
"Specifies the strip count to use when attempting to extract sources from "
"an archive. By default, the extraction process will strip a single "
"directory from an archive (value: 1). If a package's archive has no "
"container directory, a strip count of zero can be set; likewise if an "
"archive contains multiple container directories, a higher strip count can"
" be set."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:381
msgid "LIBFOO_VCS_TYPE"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:384
msgid ""
"Explicitly sets the version control system type to use when acquiring "
"sources. releng-tool attempts to automatically determine the VCS type of "
"a package based off a |LIBFOO_SITE|_ value. In some scenarios, a site "
"value may be unable to specify a desired prefix/postfix. A developer can "
"instead explicitly set the VCS type to be used no matter what the site "
"value is configured as."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:390
msgid "Supported types are as follows:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:392
msgid "``bzr`` (Bazaar)"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:393
msgid "``cvs`` (CVS)"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:394
msgid "``git`` (Git)"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:395
msgid "``hg``  (Mercurial)"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:396
msgid "``none`` (no VCS; virtual package)"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:397
msgid "``scp`` (SCP)"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:398
msgid "``svn`` (SVN)"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:399
msgid "``url`` (URL)"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:405
msgid ""
"If a project registers a custom extension which provides a custom VCS "
"type, the extension type can be set in this option."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:408
msgid ""
"Using a specific type will create a dependency for a project that the "
"respective host tool is installed on the host system. For example, if a "
"Git VCS-type is set, the host system will need to have ``git`` installed "
"on the system."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:413
msgid "package post-processing"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:415
msgid ""
"Every package, no matter which package |LIBFOO_TYPE|_ is defined, can "
"create a post-processing script to invoke after a package has completed "
"an installation stage. The existence of a ``<package>-post`` inside a "
"package directory will trigger the post-processing stage for the package."
" An example post-processing script (``libfoo-post``) can be as follows:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:428
msgid ""
"A post-processing script for a package is optional; thus, if a script is "
"not provided, no post-processing will be performed for the package."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages:431
#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-script:34
msgid ""
"See also `script helpers`_ for helper functions/variables available for "
"use."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-sites:4
msgid "site definitions"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-sites:6
msgid ""
"The following outlines the details for defining supported site "
"definitions. If attempting to use an extension-provided site type, please"
" consult the documentation provided by said extension."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-sites:12
msgid ""
"All site values can be defined with a prefix value (e.g. ``git+`` for Git"
" sources) or postfix value; however, this is optional if a package wishes"
" to use the |LIBFOO_VCS_TYPE|_ option."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-sites:17
msgid "bazaar site"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-sites:19
msgid ""
"To define a Bazaar_-based location, the site value must be prefixed with "
"a ``bzr+`` value. A site can be defined as follows:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-sites:28
msgid ""
"The value after the prefix is a path which will be provided to a ``bzr "
"export`` call [#bzrexport]_. Content from a Bazaar repository will be "
"fetched and archived into a file during fetch stage. Once a cached "
"archive is made, the fetch stage will be skipped unless the archive is "
"manually removed."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-sites:34
msgid "cvs site"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-sites:36
msgid ""
"To define a CVS_-based location, the site value must be prefixed with a "
"``cvs+`` value. A site can be defined as follows:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-sites:43
msgid ""
"The value after the prefix is a space-separated pair, where the first "
"part represents the CVSROOT [#cvsroot]_ to use and the second part "
"specifies the CVS module [#cvsmodule]_  to use. Content from a CVS "
"repository will be fetched and archived into a file during fetch stage. "
"Once a cached archive is made, the fetch stage will be skipped unless the"
" archive is manually removed."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-sites:50
msgid "git site"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-sites:52
msgid ""
"To define a Git_-based location, the site value must be prefixed with a "
"``git+`` value or postfixed with the ``.git`` value. A site can be "
"defined as follows:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-sites:61
msgid ""
"The site value (less prefix, if used) is used as a Git remote "
"[#gitremote]_ for a locally managed cache source. Git sources will be "
"cached inside the ``cache`` directory on first-run. Future runs to fetch "
"a project's source will use the cached Git file system. If a desired "
"revision exists, content will be acquired from the cache location. If a "
"desired revision does not exist, the origin remote will be fetched for "
"the new revision (if it exists)."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-sites:69
msgid "mercurial site"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-sites:71
msgid ""
"To define a Mercurial_-based location, the site value must be prefixed "
"with a ``hg+`` value. A site can be defined as follows:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-sites:78
msgid ""
"The value after the prefix is used as the ``SOURCE`` in an ``hg clone`` "
"call [#hgclone]_. Mercurial sources will be cached inside the ``cache`` "
"directory on first-run. Future runs to fetch a project's source will use "
"the cached Mercurial repository. If a desired revision exists, content "
"will be acquired from the cache location. If a desired revision does not "
"exist, the origin remote will be pulled for the new revision (if it "
"exists)."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-sites:86
msgid "scp site"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-sites:88
msgid ""
"To define an SCP-based location, the site value must be prefixed with a "
"``scp+`` value. A site can be defined as follows:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-sites:95
msgid ""
"The value after the prefix is a path which will be provided to a ``scp`` "
"call's [#scpcommand]_ source host value. The SCP site only supports "
"copying a file from a remote host. The fetched file will be stored inside"
" the ``dl`` directory. Once fetch, the fetch stage will be skipped unless"
" the file is manually removed."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-sites:101
msgid "svn site"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-sites:103
msgid ""
"To define a Subversion_-based location, the site value must be prefixed "
"with a ``svn+`` value. A site can be defined as follows:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-sites:110
msgid ""
"The value after the prefix is a path which will be provided to a ``svn "
"checkout`` call [#svncheckout]_. Content from a Subversion repository "
"will be fetched and archived into a file during fetch stage. Once a "
"cached archive is made, the fetch stage will be skipped unless the "
"archive is manually removed."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-sites:116
msgid "url site (default)"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-sites:118
msgid ""
"All packages that do not define a helper prefix/postfix value (as seen in"
" other site definitions) or do not explicitly set a |LIBFOO_VCS_TYPE|_ "
"value (other than ``url``), will be considered a URL site. A URL site can"
" be defined as follows:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-sites:127
msgid ""
"The site value provided will be directly used in a URL request. URL "
"values supported are defined by the Python's ``urlopen`` implementation "
"[#urlopen]_, which includes (but not limited to) ``http(s)://``, "
"``ftp://``, ``file://`` and more."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-hashes:4
msgid "hash file"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-hashes:6
msgid ""
"When downloading assets from a remote instance, a package's hash file can"
" be used to help verify the integrity of any fetched content. For "
"example, if a package lists a host with a ``my-archive.tgz`` to download,"
" the fetch process will download the archive and verify its hash to a "
"listed entry before continuing. If a hash does not match, the build "
"process stops indicating an unexpected asset was downloaded."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-hashes:13
msgid "It is recommended that:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-hashes:15
msgid ""
"Any URL-based site asset have a hash entry defined for the asset (to "
"ensure the package sources are not corrupted or have been unexpectedly "
"replaced)."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-hashes:17
msgid ""
"A hash entry should exist for license files (additional sanity check if a"
" package's license has change)."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-hashes:20
msgid ""
"To create a hash file for a package, add a ``<my-package>.hash`` file "
"inside the package's directory. The hash file should be a UTF-8 encoded "
"file and can contain multiple hash entries. A hash entry is a 3-tuple "
"defining the type of hash algorithm used, the hash value expected and the"
" asset associated with the hash. A tuple entry is defined on a single "
"line with each entry separated by whitespace characters. For example:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-hashes:33
msgid ""
"Comments are permitted in the file. Lines leading with a ``#`` character "
"or inlined leading ``#`` character after a whitespace character will be "
"ignored."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-hashes:36
msgid ""
"Officially supported hash types are FIPS-180 algorithms (``sha1``, "
"``sha224``, ``sha256``, ``sha384`` and ``sha512``) as well as (but not "
"recommended) RSA'S MD5 algorithm. Other algorithms, while unofficially "
"supported, can be used if provided by the system's OpenSSL library."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-hashes:41
msgid ""
"Multiple hash entries can be provided for the same file if desired. This "
"is to assist in scenarios where a checked out asset's content changes "
"based on the system it is checked out on. For example, a text file "
"checked out from Git may use Windows line-ending on Windows system, and "
"Unix-line endings on other systems:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-script:2
msgid "script package (default)"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-script:4
msgid ""
"A script-based package is the most basic package type available. By "
"default, packages are considered to be script packages unless explicitly "
"configured to be another package type (|LIBFOO_TYPE|_). If a developer "
"wishes to explicitly configure a project as script-based, the following "
"configuration can be used:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-script:13
msgid "A script package has the ability to define three Python stage scripts:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-script:15
msgid "``<package>-configure`` - script to invoke during the configuration stage"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-script:16
msgid "``<package>-build`` - script to invoke during the build stage"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-script:17
msgid "``<package>-install`` - script to invoke during the installation stage"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-script:18
msgid "``<package>-post`` - script to invoke after the installation stage"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-script:20
msgid "An example build script (``libfoo-build``) can be as follows:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-script:29
msgid ""
"When a package performs a configuration, build or installation stage; the"
" respective script (mentioned above) will be invoked. Package scripts are"
" optional; thus, if a script is not provided for a stage, the stage will "
"be skipped."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-autotools:2
msgid "autotools package"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-autotools:4
msgid ""
"An autotools package provides support for processing a `GNU Build "
"System`_ supported module."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-autotools:11
msgid ""
"When an autotools package performs a configuration stage, the package may"
" invoke ``autoreconf`` (if configured to do so) and then invoke "
"``configure``. When the build stage is reached, ``make`` will be invoked "
"followed by ``make install`` during the installation stage."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-autotools:16
msgid ""
"The following sections outline configuration options are available for an"
" autotools package."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-autotools:20
msgid "LIBFOO_AUTOTOOLS_AUTORECONF"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-autotools:22
msgid ""
"Specifies whether or not the package needs to perform an autotools re-"
"configuration. This is to assist in the rebuilding of GNU Build System "
"files which may be broken or a patch has introduced new build script "
"changes that need to be applied. This field is optional. By default, "
"``autoreconf`` is not invoked."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-build-defs:2
msgid "LIBFOO_BUILD_DEFS"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-build-defs:4
msgid ""
"Provides a means to pass definitions into the build process. This option "
"can is defined as a dictionary of string pairs. This field is optional."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-build-env:2
msgid "LIBFOO_BUILD_ENV"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-build-env:4
msgid ""
"Provides a means to pass environment variables into the build process. "
"This option is defined as a dictionary with key-value pairs where the key"
" is the environment name and the value is the environment variable's "
"value. This field is optional."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-build-opts:2
msgid "LIBFOO_BUILD_OPTS"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-build-opts:4
msgid ""
"Provides a means to pass command line options into the build process. "
"This option can be defined as a dictionary of string pairs or a list with"
" strings -- either way defined will generate argument values to include "
"in the build event. This field is optional."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-conf-defs:2
msgid "LIBFOO_CONF_DEFS"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-conf-defs:4
msgid ""
"Provides a means to pass definitions into the configuration process. This"
" option can is defined as a dictionary of string pairs. This field is "
"optional."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-conf-env:2
msgid "LIBFOO_CONF_ENV"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-conf-env:4
msgid ""
"Provides a means to pass environment variables into the configuration "
"process. This option is defined as a dictionary with key-value pairs "
"where the key is the environment name and the value is the environment "
"variable's value. This field is optional."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-conf-opts:2
msgid "LIBFOO_CONF_OPTS"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-conf-opts:4
msgid ""
"Provides a means to pass command line options into the configuration "
"process. This option can be defined as a dictionary of string pairs or a "
"list with strings -- either way defined will generate argument values to "
"include in the configuration event. This field is optional."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-install-defs:2
msgid "LIBFOO_INSTALL_DEFS"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-install-defs:4
msgid ""
"Provides a means to pass definitions into the installation process. This "
"option can is defined as a dictionary of string pairs. This field is "
"optional."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-install-env:2
msgid "LIBFOO_INSTALL_ENV"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-install-env:4
msgid ""
"Provides a means to pass environment variables into the installation "
"process. This option is defined as a dictionary with key-value pairs "
"where the key is the environment name and the value is the environment "
"variable's value. This field is optional."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-install-opts:2
msgid "LIBFOO_INSTALL_OPTS"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-install-opts:4
msgid ""
"Provides a means to pass command line options into the installation "
"process. This option can be defined as a dictionary of string pairs or a "
"list with strings -- either way defined will generate argument values to "
"include in the installation event. This field is optional."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-cmake:2
msgid "cmake package"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-cmake:4
msgid ""
"A CMake package provides support for processing a `CMake`_ supported "
"module."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-cmake:6
msgid ""
"During the configuration stage of a CMake package, ``cmake`` will be "
"invoked to generate build files for the module. For the build stage, "
"``cmake --build`` will be invoked to generated build files. Similar "
"approach for the installation stage where the build option is invoked "
"again but with the ``install`` target invoked: ``cmake --build --target "
"install``. Each stage can be configured to manipulate environment "
"variables and options used by the CMake executable."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-cmake:13
msgid ""
"The default configuration built for projects is ``RelWithDebInfo``. A "
"developer can override this option by explicitly adjusting the "
"configuration option ``--config`` to, for example, ``Debug``:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-cmake:31
msgid ""
"The following sections outline configuration options are available for a "
"CMake package."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-python:2
msgid "python package"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-python:4
msgid ""
"A Python package provides support for processing a `Python`_ supported "
"module."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-python:6
msgid ""
"Only the build and installation phases are used when processing the "
"sources for a Python package (i.e. no configuration stage is invoked). "
"The build phase will invoke ``setup.py build`` while the installation "
"stage will invoke ``setup.py install``. When a Python package is process,"
" it will use the system's default Python interpreter. A developer can "
"override what Python interpreter to use by configuring the "
"``PYTHON_INTERPRETER`` option in a package:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-python:17
msgid ""
"The following sections outline configuration options are available for a "
"Python package."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-python:41
msgid "LIBFOO_PYTHON_INTERPRETER"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/packages-type-python:43
msgid ""
"Defines a specific Python interpreter when processing the build and "
"installation stages for a package. If not specified, the system's Python "
"interpreter will be used. This field is optional."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:2
msgid "other"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:5
msgid "post-processing"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:9
msgid ""
"A post-processing script (if used) will be invoked each time ``releng-"
"tool`` reaches the final stage of a build."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:12
msgid ""
"After each package has been processed, a project has the ability to "
"perform post-processing. Post-processing allows a developer to cleanup "
"the target directory, build an archive/package from generated results and"
" more. If a project contains a ``releng-post`` inside the root directory,"
" the post-processing script will be invoked in the final stage of a "
"build."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:18
msgid ""
"A developer may start out with the following post-processing script "
"``<root>/releng-post``:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:28
msgid ""
"The above script will output the newly inserted print message at the end "
"of a build process:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:39
msgid ""
"A developer can take advantage of `environment variables`_ and `script "
"helpers`_ for additional support."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:42
msgid ""
"It is important to note that a post-processing script will be invoked "
"each time a ``releng-tool`` invoke reaches the final stage of a build. A "
"developer should attempt to implement the post-processing script in a way"
" that it can be invoked multiple times. For example, if a developer "
"decides to move a file out of the target directory into an interim "
"directory when building an archive, it is most likely that a subsequent "
"request to build may fail since the file can no longer be found inside "
"the target directory."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:53
msgid "licenses"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:55
msgid ""
"A releng-tool project can defined multiple packages, each with the "
"possibility of having multiple licenses associated with them. Each "
"project may vary: some may have only proprietary sources and may not care"
" about tracking this information; some may only use open source software "
"and require to populate license information for a final package; or a "
"mix."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:61
msgid ""
"When license information is populated for a project, each project's "
"license information (|LIBFOO_LICENSE_FILES|_) is will be populated into a"
" single license document. If a developer defines the "
"|CONF_LICENSE_HEADER|_ configuration, the generated document will be "
"prefixed with the header content. For example, ``releng`` can be "
"configured to prepare a license header from a local file ``assets"
"/license-header.tpl``:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:83
msgid ""
"A side note is that licenses for a project are generated before the "
"`post-processing`_ phase; hence, generated license document(s) may be "
"included when attempting to generated final archives/packages."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:88
msgid "patching"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:92
msgid ""
"Patches are ignored when in :ref:`development mode` for packages with a "
"development version revision or when in :ref:`local-sources mode` for "
"internal packages."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:96
msgid ""
"The patching stage for a package provides the ability for a developer to "
"apply one or more patches to extracted sources. A project may define an "
"external package which fetches an archive that is not maintained by the "
"project owners. The fetched source may not be able to build in a "
"developer's releng-tool project due to limitations of the implementation "
"or build scripts provided by the package. A developer can prepare a "
"series of patches to apply to a package and submit changes upstream to "
"correct the issue; however, the developer is then left to either wait for"
" the changes to be merged in or needs to make a custom archive with the "
"appropriate modifications already applied. To avoid this, a developer can"
" include patches directly in the package folder to be automatically "
"applied during patching stage."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:108
msgid ""
"When a package's patch stage is reached, releng-tool will look for "
"patches found inside the package folder with the extension ``.patch``. "
"Patches found inside a package folder are applied in ascending order. It "
"is recommended to prefix patch filenames with a numerical value for "
"clarity. For example, the following package patches:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:124
msgid "With be applied in the following order:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:126
msgid "``0001-accept-linker-flags.patch``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:127
msgid "``0002-correct-output-path.patch``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:128
msgid "``0003-support-disabling-test-build.patch``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:130
msgid ""
"If a user configures their build environment in :ref:`development mode`, "
"patches will not be applied if a package defines a development revisions."
" The idea is that a development revision is most likely the bleeding edge"
" source of a package and does not need any patches. If a user configures "
"their build environment in :ref:`local-sources mode` and a package is "
"defined as internal, patches will not be applied to the sources. This is "
"to prevent the patching system from making unexpected modifications to a "
"developer's local source variants."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:140
msgid "internal and external packages"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:142
msgid ""
"Packages are either internal packages or external packages. All packages "
"are considered external packages by default unless explicitly configured "
"as internal through either the package option |LIBFOO_INTERNAL|_ or using"
" the project configuration |CONF_DEFAULT_INTERN|_ (see also "
"|LIBFOO_EXTERNAL|_). Both package types are almost treated the same "
"except for the following:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:148
msgid ""
"An internal package will not generate output warnings if the package is "
"missing :ref:`hash information <hash_files>`."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:150
msgid ""
"An internal package will not generate output warnings if the package is "
"missing :ref:`license information <license_information>`."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:152
msgid ""
"When configured for :ref:`development mode`; the patch stage will not be "
"performed if the package specifies a development revision "
"(|LIBFOO_DEVMODE_REVISION|_)."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:155
msgid ""
"When configured for :ref:`local-sources mode`; the fetch, extract and "
"patch stages will not be performed."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:159
msgid "script helpers"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:161
msgid ""
"releng-tool provides a series of helper functions which can be used in "
"script-based packages, post-processing and more. Helper functions "
"provided are listed below:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:166
msgid "method"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:166
msgid "documentation"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:168
msgid "``debug``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:172
msgid "``err``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:176
msgid "``log``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:180
msgid "``note``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:184
msgid "``releng_copy``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:188
msgid "``releng_execute``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:192
msgid "``releng_exists``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:196
msgid "``releng_exit``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:200
msgid "``releng_expand``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:204
msgid "``releng_join``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:211
msgid "``releng_move``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:215
msgid "``releng_remove``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:219
msgid "``releng_tmpdir``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:223
msgid "``releng_touch``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:227
msgid "``releng_wd``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:231
msgid "``success``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:235
msgid "``verbose``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:239
msgid "``warn``"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:247
msgid ""
"Scripts directly invoked by releng-tool will automatically have these "
"helpers registered in the script's globals module (i.e. no import is "
"necessary). If a project defines custom Python modules in their project "
"and wishes to take advantage of these helper functions, the following "
"import can be used to, for example, import a specific function:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:257
msgid "Or, if desired, all helper methods can be imported at once:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:264
msgid "vcs ignore"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:266
msgid ""
"When invoking releng-tool on a project, the project's root directory will"
" be populated with cached assets and other output files. A series of "
"standard ignore patterns can be applied to a repository to prevent "
"observing these generated files using VCS tools. The following is an "
"example ignore configuration which can be applied for Git-based "
"repositories (via ``.gitignore``):"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:283
msgid "quirks"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:285
msgid ""
"The following outlines a series of configuration |CONF_QUIRKS|_ that can "
"be applied to deal with rare host environment scenarios."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:288
msgid ""
"``releng.cmake.disable_parallel_option`` -- Disables the ``--parallel`` "
"option from being injected when a CMake-package is performing a build "
"stage. This is to help support host systems running variants of CMake "
"which do not explicitly provide a parallelization option."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:293
msgid ""
"Quirks are enabled through a configuration (override) script such as "
"follows:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:302
msgid "loading extensions"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:306
msgid ""
"If looking for information on developing extensions for releng-tool, "
"consult the :ref:`contributor's guide -- extensions "
"<contributor_guide_ext>`."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:309
msgid ""
"A releng-tool project can define one or more extensions to load for "
"externally implemented capabilities. For example, a project can load "
"extensions ``ext-a`` and ``ext-b`` with the following defined in their "
"project's configuration:"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:321
msgid ""
"During the initial stages of a release engineering process, releng-tool "
"will check and load any configured extension. In the event that an "
"extension is missing, is unsupported for the running releng-tool version "
"or fails to load, a detailed error message will be presented to the user."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide/other:326
msgid ""
"While the ability to load extensions is supported, capabilities provided "
"by extensions are not officially supported by releng-tool. For issues "
"related to specific extension use, it is recommended to consult the "
"documentation provided by the providers of said extensions."
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide.rst:18
msgid "http://doc.bazaar.canonical.com/bzr.2.7/en/user-reference/export-help.html"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide.rst:19
msgid ""
"https://www.gnu.org/software/trans-"
"coord/manual/cvs/html_node/checkout.html#checkout"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide.rst:20
msgid ""
"https://www.gnu.org/software/trans-"
"coord/manual/cvs/html_node/Specifying-a-repository.html"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide.rst:21
msgid "https://git-scm.com/docs/git-remote"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide.rst:22
msgid "https://www.selenic.com/mercurial/hg.1.html#clone"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide.rst:23
msgid "https://linux.die.net/man/1/scp"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide.rst:24
msgid "http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.checkout.html"
msgstr ""

#: ../.releng_cache/releng-tool/Documentation/developer-guide.rst:25
msgid "https://docs.python.org/3.7/library/urllib.request.html#urllib.request.urlopen"
msgstr ""

