# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019 releng-tool
# This file is distributed under the same license as the releng-tool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: releng-tool \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-26 00:59-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../releng-tool/Documentation/contributor-guide.rst:2
msgid "contributor guide"
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:4
msgid "The following outlines common directory locations:"
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:6
msgid "``Documentation`` - project documentation"
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:7
msgid "``releng/api/`` - api implementation for supporting releng-tool extensions"
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:8
msgid "``releng/engine/`` - core implementation"
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:9
msgid "``releng/ext/`` - extensions that are maintained in the official tree"
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:10
msgid "``releng/extract/`` - translating fetched content to a build's working area"
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:11
msgid "``releng/fetch/`` - support for fetching content from package sites"
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:12
msgid "``releng/tool/`` - definitions for host tools used by tool features"
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:13
msgid "``test/`` - testing-related content for this project's implementation"
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:15
msgid "releng-tool is built on the Python language and aims to be the minimum dependency for users of the tool. Specific features enabled by a developer's project may require additional tools (e.g. using Git_ to fetch sources requires ``git`` to be installed); however, a user should not be required to install tools for features that are not being used."
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:22
msgid "contributing"
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:24
msgid "Developers are free to submit contributions for this project. Developers wishing to contribute should consult this project's `CONTRIBUTING`_ document. A reminder that any contributions must be signed off with the `Developer Certificate of Origin`_."
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:30
msgid "root directory"
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:32
msgid "A user invoking releng-tool will attempt to operate in a project root directory. Any content managed by this tool (e.g. creating directories, downloading sources, etc.) should all be performed inside the root directory. Some exceptions exist where a user requests to adjust the download directory (i.e. providing the ``--dl-dir`` argument)."
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:39
msgid "fetching design"
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:41
msgid "Packages can describe where external content should be fetched from. The most common fetching method is a simple URI-style fetch such as downloading an archive from an HTTP/FTP location. Assets acquired in this manner are downloaded into the root directory's download folder (e.g. ``<ROOT>/dl``). The extraction phase will later use this folder to find package content to prepare against."
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:47
msgid "releng-tool also supports the fetching of content from version control systems. Sources can either be fetched and placed into an archive, in a similar fashion as fetching an archive from HTTP/FTP locations, or sources can be fetched into a \"cache directory\" if supported (typically distributed version controlled sources). For example, Git_ repositories (see also Git's |--git-dir|_) will be stored in the root directory's cache folder (e.g. ``<ROOT>/cache``). During the extraction stage, target revisions will be pulled from the cache location using the ``git`` client."
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:56
msgid "Not all packages will fetch content (i.e. placeholder packages)."
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:61
msgid "extraction design"
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:63
msgid "In most cases, the extraction phase will process archives (e.g. ``.tar.gz``, ``.zip``, etc.) and place their content into a package's build working directory. Implementation will vary for fetching implementation which stores content into a cache directory. For example, Git_ and Mercurial_ sources have their own extraction implementations to pull content from their respective distributed file systems into a package's build working directory."
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:71
msgid "host and build environment"
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:73
msgid "releng-tool attempts to minimize the impact of a host system's environment on a project's build. For example, the build phase of a package should not be pulling compiler flags provided from the host system's environment. These flags should be provided from the package definition. Tools invoked by releng-tool will attempt to be invoked to ignore these external environment variables. Some exceptions apply such as environment variables dealing with authorization tokens."
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:84
msgid "extensions"
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:86
msgid "Developers wishing to provide extensions to releng-tool should consult the API implementation found in this tool's repository (|releng/api/__init__.py|_). Implementation in the API folder aims to be \"API safe\" -- there is a strong attempt to prevent the changing of classes, methods, etc. to prevent compatibility issues as both releng-tool and extensions (if any) evolve. A developer for a releng-tool project would register an extension to load using the ``extensions`` configuration option inside the project configuration (``releng.py``):"
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:106
msgid "On start, releng-tool will use this extension configuration to find and invoke the setup stage for each available extension."
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:109
msgid "An extension will define ``releng_setup`` to be registered into releng-tool. The call will provide an instance to the releng-tool application which allows an extension to register custom fetching, extraction and package implementations."
msgstr ""

#: ../../releng-tool/Documentation/contributor-guide.rst:133
msgid "For more details for API details, consult the documentation found inside the `API implementation`_."
msgstr ""

