# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019 releng-tool
# This file is distributed under the same license as the releng-tool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: releng-tool \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-08 01:56-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../releng-tool/Documentation/developer-guide.rst:2
msgid "developer guide"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:4
msgid "The following will outline details on how to prepare a releng-tool project to be used to assist the release engineering of a project. For details on a user interaction with releng-tool, consult the :doc:`user's guide <user-guide>`."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:9
msgid "prelude"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:11
msgid "A releng-tool project can define multiple packages, each can be based off of different languages, configured to use custom toolchains and more. Every package has multiple stages (such as fetching, configuring, building, etc.) which can help contribute to target sysroot. Once all packages are processed, the target sysroot can be packaged for distribution."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:17
msgid "The following outlines the (default) common directory/file locations for a releng-tool project:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:20
msgid "``cache/`` - cached content from select package sources (e.g. dvcs, etc.)"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:21
msgid "``dl/`` - archives for select package sources (e.g. ``.tgz``, ``.zip``, etc.)"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:22
msgid "``package/`` - container for packages"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:23
msgid "``package/<package>/`` - a package-specific folder"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:24
msgid "``package/<package>/<package>`` - a package definition"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:25
msgid "``output/`` - container for all output content"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:26
msgid "``output/build/`` - container for package building"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:27
msgid "``output/host/`` - area to hold host-specific content"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:28
msgid "``output/images/`` - container for final images/archives"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:29
msgid "``output/staging/`` - area to hold staged sysroot content"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:30
msgid "``output/target/`` - area to hold target sysroot content"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:31
msgid "``releng.py`` - project configuration"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:33
msgid "How these directories and files are used can vary on how a developer defines a releng-tool project. Consider the following example:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:36
msgid "releng-tool will load the project's configuration and respective package definitions to determine what steps need to be performed."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:38
msgid "Package sources can be downloaded into either the ``cache/`` or ``dl/`` folder, depending on what type of sources will be fetched. For example, Git sources will be stored inside of the ``cache/`` to take advantage of its distributable nature, and archive files (such as ``.tgz``, ``.zip``, etc.) will be stored inside the ``dl/`` directory."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:43
msgid "Each package will be extracted into its own output directory inside ``output/build/``. The working areas for packages allow a package to be patched, configured and built based on how the developer configures the respective packages."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:47
msgid "Once packages are built, their final executables, libraries, etc. can be installed into either the host area (``output/host/``), staging area (``output/staging/``) or the target area (``output/target/``) depending on what has been built. The target area is designed for the final set of assets produced from a build; the intent is that the files contained inside this folder are planned to be used on a target system (stripped, cross-compiled, etc.). A staging area is like a target area but may contain more content such as headers not intended for a final target, interim development assets, and more. Host content is designed for content built for the host system which other packages may depend on."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:57
msgid "At the end of the releng-tool process, a post-stage script can be invoked to help archive/package content from the target area (``output/target/``) into the images folder (``output/images/``). For example, generating an archive ``output/images/my-awesome-project-v1.0.0.tgz``."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:62
msgid "Not all projects may use each of these folders or take advantage of each stage. While various capabilities exist, it does not mean releng-tool will handle all the nitty-gritty details to make a proper build of a project. For example:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:66
msgid "If a developer wishes to cross-compile a package to a target, they must ensure the package is configured in the proper manner to use a desired toolchain."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:68
msgid "If a developer wants to process a Python package, they must ensure the proper interpreter is used if they cannot rely on the host's default interpreter."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:70
msgid "If a developer develops script-based packages, they must ensure that these scripts properly handle multiple re-invokes (e.g. if a builder performs a rebuild on a package)."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:74
msgid "releng-tool will attempt to provide an easy way to deal with fetching sources, ensuring projects are invoked in order, and more; however, the more advanced features/actions a developer may want in their release engineering (like the examples above), the more a developer will need to manage in their project."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:80
msgid "getting started"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:82
msgid "releng-tool is made on Python. This document will outline package definitions, scripts and more which are most likely Python scripts, and in turn will be invoked/processed by the releng-tool. While releng-tool supports running on various host systems (e.g. Linux, OS X, Windows, etc.), this guide will primarily show examples following a Unix-styled file system."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:88
msgid "The following will provide a very simple script-based project solution to get started. This example will make a project with two packages, setup a dependency between them and setup scripts to help show a developer how packages are processed. If there is no desire to make a simple project example, one may venture to the `actually getting started`_ section."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:94
msgid "To start, make a new folder for the project, two sample packages and move into the root folder:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:103
msgid "Inside the ``libx`` project, the package definition and script-based files will be created. First, build the package definition ``my-project/libx/libx`` with the following content:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:114
msgid "Next, create a build script for the ``libx`` project ``my-project/libx/build`` with the following content:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:124
msgid "This is a very simple script-based package (all package options explained later in this document). Repeat the same steps for the ``liby`` package with the file ``my-project/liby/liby`` containing:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:136
msgid "And ``my-project/liby/build`` containing:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:145
msgid "One difference with this package is the definition of ``LIBY_DEPENDENCIES``, which tells releng-tool to ensure that ``libx`` package is processed before ``liby``."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:149
msgid "With this minimal set of packages, the project's releng-tool configuration can now be created. At the root of the project folder, create a ``releng.py`` configuration file with the following contents:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:163
msgid "This sample project should be ready for a spin. While in the ``my-project`` folder, invoke ``releng-tool``:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:182
msgid "This above output shows that the ``libx`` package's stage are invoke followed by ``liby`` package's stages. For the build stage in each package, each respective package script has been invoked. While this example only prints a message, more elaborate scripts can be made to handle a package's source to build."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:187
msgid "To clean the project, a ``releng-tool clean`` request can be invoked:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:193
msgid "Now the project is in a state again to perform a fresh build. This concludes the initial getting started example. Feel free to remove the example project and prepare for steps to make a real releng-tool project."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:198
msgid "actually getting started"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:200
msgid "Start building a new releng-tool project by creating the following root and package folders for a project, and venture into the root folder:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:208
msgid "Inside the root folder, create a releng-tool configuration file ``releng.py`` with the following skeleton content:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:219
msgid "This configuration defines a releng-tool project with no packages. Start to change this by adding a package or more for each a module to be built in the release engineering process. For example, packages can be individual static libraries, simple asset fetching (e.g. image/document downloading) and more."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:224
msgid "For each package, create a new folder inside ``<my-project>/package`` to represent the package."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:231
msgid "Inside each newly created package, create a package definition file. This (Python-based) file will be named with the same name as the package folder (i.e. ``<my-project>/package/<my-package>/<my-package>``). An initial skeleton structure for the definition file is as follows:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:248
msgid "Initial changes to note:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:250
msgid "For a package, any support package variable requires the package name as a prefix. The prefix should be a underscore-separated all-uppercase string value. In the above example, if the package name was ``my-package``, the prefix will be ``MY_PACKAGE_``."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:254
msgid "One of the most important options is the version option (``MY_PACKAGE_VERSION``). This value is used to help manage downloaded asset names, build output directories and sometimes even revision values for source-fetching. An example of a good version value is '1.0'; however, the value can vary depending on the package being defined."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:259
msgid "The site value (``MY_PACKAGE_SITE``) is used to identify where source/assets can be fetched from. A site can be a Git repository, a URL, SCP location, a site value supported by a custom fetch extension or more."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:262
msgid "A helpful configuration option is the dependency list (``MY_PACKAGE_DEPENDENCIES``). If a package depends on another package being built, the name of the package should be listed in this option. This ensures that releng-tool will invoke package stages in the appropriate order."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:266
msgid "While not required, it is recommended to provide license tracking for packages when possible. ``MY_PACKAGE_LICENSE`` and ``MY_PACKAGE_LICENSE_FILES`` are list values to define the list of licenses applicable to this package and the location of the respective license files found in the sources. A developer can exclude these options if desired. If a developer does provide these options, the end of the build process will compile a document of used licenses for the project."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:273
msgid "The type of package (``MY_PACKAGE_TYPE``) can be used to take advantage of various package types supported by releng-tool. By default, packages are script-based, where Python scripts inside the packages are invoked during each stage (e.g. ``<my-project>/package/build`` would be invoked during the build phase). releng-tool also supports other package types such as autotools, CMake and more to limit the need to define custom scripts for common build steps. Developers can also use package types defined by included extensions (if any)."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:281
msgid "A detailed list of options can be found in `common package configurations`_ and `advanced package configurations`_."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:284
msgid "Once all packages have been prepared with desired package definitions options, the root configuration script (``releng.py``) should be updated to indicate which packages should be built. All packages can be defined in the ``packages`` list if desired. For example, if a project has packages ``liba``, ``libb`` and ``programc``, the following package list can be defined:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:298
msgid "Note that a developer does not need to explicitly add each component if dependencies are configured. Considering the same packages listed above, if ``programc`` depends on both ``liba`` and ``libb`` packages, only ``programc`` needs to be explicitly listed:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:309
msgid "When processing, both ``liba`` and ``libb`` packages will be implicitly loaded and processed like any other package."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:312
msgid "Once all the project's packages are ready, a developer can try their luck by attempting to perform the release engineering process:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:319
msgid "A developer may not have luck on the first go. Tweaks may be needed on the package definitions, custom scripts (if used) and issues found in sources. A developer may invoke ``releng-tool`` multiple times to attempt to continue the build process for a project. A developer may wish to use the ``clean`` option to remove an existing extracted sources/partially built sources:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:329
msgid "Or start from a completely fresh state using ``mrproper`` to remove any built images and file mode flags:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:336
msgid "There may also be times if a single project needs to be cleaned:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:342
msgid "Consult the :doc:`user's guide <user-guide>` for more action information."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:344
msgid "Eventually the project should be in a good state that each package is being built as expected. Now a user can decide on what to do with the resulting files. After the invoke of a releng-tool process, it is typical for final binaries, public includes, etc. to be found inside the ``<root>/output/target`` directory. If a developer only desires to manually take the assets from this folder and distribute/store them, no additional steps are required. However, it may be common that a developer wants to package some assets (whether it be a tar/zip/etc. container, pkg/rpm/etc. package or more). A developer could deal with such a capability outside the releng-tool process; but if a developer wishes to hook the end of the process, a post-processing script can be used."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:355
msgid "A developer may create a post-processing file ``post.py`` in the root directory. On the completion of processing each package, the post-processing script will be invoked. It is important to note that the post-processing script may be invoked multiple times if a user attempts to rebuild the project. For example, if the file ``post.py`` has the following contents:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:368
msgid "The target directory will be output to standard out at the end of the build. A developer may wish to define their own Python script to decide on how to package the contents found in ``TARGET_DIR`` (see also `script helpers`_ for helper variables/functions)."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:374
msgid "releng.py"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:376
msgid "A releng-tool project defines its configuration options inside the a ``releng.py`` file at the root of a project. The primary configuration option for a developer to define is ``packages``, which is used to hold a list of packages to be processed:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:392
msgid "A series of additional configuration options are available to be defined inside the project's configuration. A list of common configuration options are as follows:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:399
msgid "``default_internal``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:399
msgid "A flag to indicate that projects are implicitly loaded as internal projects. By default, packages not explicitly configured as internal or external are assumed to be external packages."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:408
#: ../../releng-tool/Documentation/developer-guide.rst:716
#: ../../releng-tool/Documentation/developer-guide.rst:1063
#: ../../releng-tool/Documentation/developer-guide.rst:1116
msgid "See also `internal and external packages`_."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:410
msgid "``extensions``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:410
msgid "A list of extensions to load before processing a releng-tool project. If an extension cannot be loaded, the release engineering process will fail with detailed information."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:422
msgid "See also `loading extensions`_."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:424
msgid "``external_packages``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:424
msgid "A list of external package locations. By default, packages for a project will be searched for in root directory's package folder (``<root>/package``). In some build environments, some packages may be required or may be preferred to be located in another location/repository. To allow packages to be loaded from another package container directory, one or more package locations can be provided. For example:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:442
msgid "``license_header``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:442
msgid "As the releng-tool build process is finalized, a license document can be generated containing each package's license information. If a developer wishes to add a custom header to the generated document, a header can be defined by project's configuration. For example:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:453
#: ../../releng-tool/Documentation/developer-guide.rst:654
msgid "See also `licenses`_."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:455
msgid "``packages``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:455
msgid "A list of packages to process. Packages listed will be processed by releng-tool till their completion. Package dependencies not explicitly listed will be automatically loaded and processed as well."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:471
msgid "``sysroot_prefix``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:471
msgid "Define a custom sysroot prefix to provide to packages during their configuration, build and installation stages. By default, the sysroot prefix is set to ``/usr``."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:480
msgid "See also |LIBFOO_PREFIX|_."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:482
msgid "``url_mirror``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:482
msgid "Specifies a mirror base site to be used for URL fetch requests. If this option is set, any URL fetch requests will first be tried on the configured mirror before attempting to acquired from the defined site in a package definition."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:497
msgid "A list of more advanced configuration options are as follows:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:500
msgid "``cache_ext``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:500
msgid "A transform for cache extension interpreting. This is an advanced configuration and is not recommended for use except for special use cases outlined below."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:505
msgid "When releng-tool fetches assets from remote sites, the site value can used to determine the resulting filename of a cached asset. For example, downloading an asset from ``https://example.org/my-file.tgz``, the locally downloaded file will result in a ``.tgz`` extension; however, not all defined sites will result in an easily interpreted cache extension. While releng-tool will attempt its best to determine an appropriate extension value to use, some use cases may not be able to be handled. To deal with these cases, a developer can define a transform method to help translate a site value into a known cache extension value."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:521
msgid "Consider the following example: a host is used to acquire assets from a content server. The URI to download an asset uses a unique request format ``https://static.example.org/fetch/25134``. releng-tool may not be able to find the extension for the fetched asset, but if a developer knows the expected archive types for these calls, a custom transform can be defined. For example:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:541
msgid "The above transform indicates that all packages using the ``static.example.org`` site will be ``tgz`` archives."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:545
msgid "``override_extract_tools``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:545
msgid "A dictionary to be provided to map an extension type to an external tool to indicate which tool should be used for extraction. For example, when a ``.zip`` archive is being processed for extraction, releng-tool will internally extract the archive; however, a user may wish to override this tool with their own extraction utility. Consider the following example:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:560
#: ../../releng-tool/Documentation/developer-guide.rst:588
#: ../../releng-tool/Documentation/developer-guide.rst:612
msgid "Note that the use of an override option should only be used in special cases (see also |CONF_OVERRIDES|)."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:564
msgid "``override_revisions``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:564
msgid "Allows a dictionary to be provided to map a package name to a new revision value. Consider the following example: a project defines ``module-a`` and ``module-b`` packages with package ``module-b`` depending on package ``module-a``. A developer may be attempting to tweak package ``module-b`` on the fly to test a new capabilities against the current stable version of ``module-a``; however, the developer does not want to explicitly change the revision inside package ``module-b``'s definition. To avoid this, an override can be used instead:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:583
msgid "The above example shows that package ``module-b`` will fetch using a test branch instead of what is defined in the actual package definition."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:592
msgid "``override_sites``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:592
msgid "A dictionary to be provided to map a package name to a new site value. There may be times where a host may not have access to a specific package site. To have a host to use a mirror location without having to adjust the package definition, the site override option can be used. For example, consider a package pulls from site ``git@example.com:myproject.git``; however, the host ``example.com`` cannot be access from the host machine. If a mirror location has been setup at ``git@example.org:myproject.git``, the following override can be used:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:618
msgid "``quirks``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:618
msgid "A list of configuration quirks to apply to deal with rare corner case scenarios which can prevent releng-tool operating on a host system."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:628
msgid "For a list of available quirks, please consult `quirks`_."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:636
msgid "environment variables"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:638
msgid "When packages and the post-processing event are processed, the following environment variables will be made available:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:642
msgid "``BUILD_DIR``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:642
msgid "The build directory."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:644
msgid "``CACHE_DIR``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:644
msgid "The cache directory."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:646
msgid "``DL_DIR``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:646
msgid "The download directory."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:648
msgid "``HOST_DIR``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:648
#: ../../releng-tool/Documentation/developer-guide.rst:850
msgid "The host directory."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:650
msgid "``IMAGES_DIR``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:650
#: ../../releng-tool/Documentation/developer-guide.rst:851
msgid "The images directory."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:652
msgid "``LICENSE_DIR``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:652
msgid "The licenses directory."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:658
msgid "``NJOBS``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:658
msgid "Number of calculated jobs to allow at a given time. Unless explicitly set by a system builder on the command line, the calculated number of jobs should be equal to the number of physical cores on the host. When building a specific package and the package overrides the number of jobs to use, the package-defined count will be used instead. This configuration will always be a value of at least one (1)."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:670
msgid "``NJOBSCONF``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:670
msgid "Number of jobs to allow at a given time. Unlike |CONF_NJOBS|_, ``NJOBSCONF`` provides the requested configured number of jobs to use. The value may be set to zero (0) to indicate an automatic detection of jobs to use. This can be useful for tools which have their own automatic job count implementation and do not want to rely on the value defined by |CONF_NJOBS|_. When building a specific package and the package overrides the number of jobs to use, the package-defined count will be used instead."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:682
msgid "``OUTPUT_DIR``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:682
msgid "The output directory."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:686
msgid "``PKG_BUILD_DIR``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:686
msgid "The directory for a specific package's buildable content."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:689
msgid "See also |CONF_PKG_BUILD_ODIR|_."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:693
msgid "``PKG_BUILD_OUTPUT_DIR``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:693
msgid "The directory for where a package's build output will be stored."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:696
msgid "See also |CONF_PKG_BUILD_DIR|_."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:698
msgid "``PKG_CACHE_FILE``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:698
msgid "The location of the cache file for a package. If package defines a fetch of an archive from a remote source, after the fetch stage is completed, the archive can be found in this location. For example, if a package defines a site ``https://www.example.com/test.tgz``, the resulting catch file may be ``<root>/output/dl/test-1.0.tgz``."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:707
msgid "``PKG_DEFDIR``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:707
msgid "The package's definition directory. For example, for a package ``test``. the definition directory would be ``<root>/package/test``."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:711
msgid "``PKG_INTERNAL``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:711
msgid "Whether or not the package is considered \"internal\". If internal, the environment variable will be set to a value of one (i.e. ``PKG_INTERNAL=1``)."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:718
msgid "``PKG_NAME``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:718
#: ../../releng-tool/Documentation/developer-guide.rst:768
msgid "The name of the package."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:720
msgid "``PKG_REVISION``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:720
msgid "The site revision of the package."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:722
msgid "See also |LIBFOO_REVISION|_."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:724
msgid "``PKG_SITE``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:724
msgid "The site of the package."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:726
msgid "See also |LIBFOO_SITE|_."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:728
msgid "``PKG_VERSION``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:728
msgid "The version of the package."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:730
msgid "See also |LIBFOO_VERSION|_."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:732
msgid "``PREFIX``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:732
msgid "The sysroot prefix for the package."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:734
msgid "``RELENG_REBUILD``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:734
msgid "Flag set if performing a re-build request."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:736
msgid "``RELENG_RECONFIGURE``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:736
msgid "Flag set if performing a re-configuration request."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:739
msgid "``RELENG_REINSTALL``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:739
msgid "Flag set if performing a re-install request."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:741
msgid "``ROOT_DIR``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:741
msgid "The root directory."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:743
msgid "``STAGING_DIR``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:743
msgid "The staging area directory."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:745
msgid "``SYMBOLS_DIR``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:745
msgid "The symbols area directory."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:747
msgid "``TARGET_DIR``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:747
msgid "The target area directory."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:755
msgid "Package-defined environment variables are also available in the rare chance that package content needs to be mangled (e.g. including a dependent module which does not properly support a sysroot staged environment). The following package-defined environment variables are available for use (where ``<PKG>`` translates to a releng-tool's determined package key):"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:762
msgid "``<PKG>_BUILD_DIR``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:762
msgid "The directory for a defined package's buildable content."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:765
msgid "``<PKG>_BUILD_OUTPUT_DIR``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:765
msgid "The directory for where a defined package's build output will be stored."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:768
msgid "``<PKG>_NAME``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:770
msgid "``<PKG>_REVISION``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:770
msgid "The revision of a defined package."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:772
msgid "``<PKG>_VERSION``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:772
msgid "The version of a defined package."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:775
msgid "Note that is it not recommended to define environment variables for the releng-tool process to use outside the project definition except for special cases (such as authentication tokens, etc.). Attempting to configure, for example, compiler flags outside the project definition circumvents configuration control a releng-tool project aims to maintain."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:782
msgid "packages"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:784
msgid "Packages are defined inside the ``package/`` directory. There is no explicit limit on the total number of packages a project can have. Packages can consist of libraries, programs or even basic assets. Package names are recommended to be lower-case with dash-separated (``-``) separators (if needed). For example, ``package-a`` is recommended over ``PackageA`` or ``package_a``; however, the choice is up to the developer making the releng-tool project."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:791
msgid "When making a package, a container folder for the package as well as a package definition file needs to be made. For example, if the package is ``package-a``, the file ``package/package-a/package-a`` should exist. Package definition files are Python-based, thus the following leading header is recommended:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:801
msgid "Inside the definition file, a series of configuration options can be set to tell releng-tool how to work with the defined package. Each option is prefixed with a variable-safe variant of the package name. The prefix value will be an uppercase string based on the package name with special characters converted to underscores. For example, ``package-a`` will have a prefix ``PACKAGE_A_``. For a package to take advantage of a configuration option, the package definition will add a variable entry with the package's prefix followed by the supported option name. Considering the same package with the name ``package-a`` (and prefix ``PACKAGE_A_``), to use the |LIBFOO_VERSION|_ configuration option, the following can be defined (``PACKAGE_A_VERSION``):"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:819
msgid "More details on available configuration options are as follows."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:822
msgid "common package configurations"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:824
msgid "The following outlines common configuration options available for packages."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:827
msgid "LIBFOO_DEPENDENCIES"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:829
msgid "List of package dependencies a given project has. If a project depends on another package, the package name should be listed in this option. This ensures releng-tool will process packages in the proper order. The following shows an example package ``libc`` being dependent on ``liba`` and ``libb`` being processed first:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:840
msgid "LIBFOO_INSTALL_TYPE"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:842
msgid "Defines the installation type of this package. A package may be designed to be built and installed for just the target area, the stage area, both or maybe in the host directory. The following options are available for the installation type:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:848
#: ../../releng-tool/Documentation/developer-guide.rst:915
#: ../../releng-tool/Documentation/developer-guide.rst:960
msgid "type"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:848
msgid "description"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:850
msgid "``host``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:851
msgid "``images``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:852
msgid "``staging``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:852
msgid "The staging area."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:853
msgid "``staging_and_target``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:853
msgid "Both the staging an target area."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:854
msgid "``target``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:854
msgid "The target area."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:857
msgid "The default installation type is ``target``."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:864
msgid "LIBFOO_LICENSE"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:867
msgid "A string or list of strings outlining the license information for a package. Outlining the license of a package is always recommended (but not required)."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:874
#: ../../releng-tool/Documentation/developer-guide.rst:898
msgid "or"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:880
msgid "See also |LIBFOO_LICENSE_FILES|_."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:883
msgid "LIBFOO_LICENSE_FILES"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:886
msgid "A string or list of strings identifying the license files found inside the package sources which match up to the defined ``LICENSE`` entries (respectively). Listing the license(s) of a package is always recommended (but not required)."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:904
msgid "See also |LIBFOO_LICENSE|_."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:907
msgid "LIBFOO_SITE"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:910
msgid "The site where package sources/assets can be found. The site can be a URL of an archive, or describe a source control URL such as Git or SVN. The following outline a series of supported site definitions:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:915
msgid "prefix/postfix"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:917
msgid "Bazaar"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:917
msgid "``bzr+``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:918
msgid "CVS"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:918
msgid "``cvs+``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:919
msgid "Git"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:919
msgid "``git+`` or ``.git``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:920
msgid "Mercurial"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:920
msgid "``hg+``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:921
msgid "SCP"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:921
msgid "``scp+``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:922
msgid "SVN"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:922
msgid "``svn+``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:923
msgid "URL"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:923
msgid "`(wildcard)`"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:926
msgid "Examples include:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:935
msgid "A developer can also use |LIBFOO_VCS_TYPE|_ to explicitly define the version control system type without the need for a prefix/postfix entry."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:938
msgid "For more information on each type's formatting, consult :ref:`site definitions <site_definitions>`."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:941
msgid "Using a specific type will create a dependency for a project that the respective host tool is installed on the host system. For example, if a Git site is set, the host system will need to have ``git`` installed on the system."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:945
msgid "If no site is defined for a package, it will be considered a virtual package (i.e. has no content). If applicable, loaded extensions may provide support for custom site protocols."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:949
msgid "See also |LIBFOO_VCS_TYPE|_."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:952
msgid "LIBFOO_TYPE"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:955
msgid "The package type. The default package type is a (Python) script-based package; however, releng-tool also provides a series of helper package types for common frameworks. The following outline a series of supported site definitions:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:960
msgid "value"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:962
msgid "Autotools"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:962
msgid "``autotools``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:963
msgid "CMake"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:963
msgid "``cmake``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:964
msgid "Python"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:964
msgid "``python``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:965
msgid "Script"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:965
msgid "``script``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:968
msgid "For example:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:974
msgid "If no type is defined for a package, it will be considered a script-based package. If applicable, loaded extensions may provide support for custom site protocols."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:978
msgid "Using a specific type will create a dependency for a project that the respective host tool is installed on the host system. For example, if a CMake type is set, the host system will need to have ``cmake`` installed on the system."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:983
msgid "LIBFOO_VERSION"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:986
msgid "The version of the package. Typically the version value should be formatted in a semantic versioning style; however, it is up to the developer to decide the best version value to use for a package. It is important to note that the version value is used to determine build output folder names, cache files and more."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:995
msgid "For some VCS types, the version value will be used to acquire a specific revision of sources. If for some case the desired version value cannot be gracefully defined (e.g. ``libfoo-v1.0`` will produce output directories such as ``libfoo-libfoo-v1.0``), |LIBFOO_REVISION|_ can be used."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1000
msgid "See also |LIBFOO_DEVMODE_REVISION|_ and |LIBFOO_REVISION|_."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1003
msgid "advanced package configurations"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1005
msgid "The following outlines more advanced configuration options available for packages."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1009
msgid "LIBFOO_BUILD_SUBDIR"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1011
msgid "Sub-directory where a package's extracted sources holds its buildable content. Sources for a package may be nested inside one or more directories. A package can specify the sub-directory where the configuration, build and installation processes are invoked from."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1021
msgid "LIBFOO_DEVMODE_REVISION"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1024
msgid "Specifies a development revision for a package. When a project is being built in :ref:`development mode`, the development revision is used over the configured |LIBFOO_REVISION|_ value. If a development revision is not defined for a project, a package will still use the configured |LIBFOO_REVISION|_ while in development mode."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1034
msgid "See also |LIBFOO_REVISION|_ and |LIBFOO_VERSION|_."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1037
msgid "LIBFOO_EXTENSION"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1039
msgid "Specifies a filename extension for the package. A package may be cached inside the download directory to be used when the extraction phase is invoked. releng-tool attempts to determine the most ideal extension for this cache file; however some cases the detected extension may be incorrect. To deal with this situation, a developer can explicitly specify the extension value using this option."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1051
msgid "LIBFOO_EXTERNAL"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1054
msgid "Flag value to explicitly indicate that a package is an external package. External packages will generate warnings if :ref:`hashes <hash_files>` or `licenses`_ are missing. By default, packages are considered external unless explicitly configured to be internal."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1066
msgid "LIBFOO_EXTOPT"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1068
msgid "Specifies extension-specific options. Packages wishing to take advantage of extension-specific capabilities can forward options to extensions by defining a dictionary of values."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1080
msgid "LIBFOO_EXTRACT_TYPE"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1082
msgid "Specifies a custom extraction type for a package. If a configured extension supports a custom extraction capability, the registered extraction type can be explicitly registered in this option."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1091
msgid "LIBFOO_FIXED_JOBS"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1093
msgid "Explicitly configure the total number of jobs a package can use. The primary use case for this option is to help limit the total number of jobs for a package that cannot support a large or any parallel build environment."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1102
msgid "LIBFOO_INTERNAL"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1105
msgid "Flag value to explicitly indicate that a package is an internal package. Internal packages will not generate warnings if :ref:`hashes <hash_files>` or `licenses`_ are missing. When configured in :ref:`local-sources mode`, package sources are searched for in the local directory opposed to site fetched sources. By default, packages are considered external unless explicitly configured to be internal."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1119
msgid "LIBFOO_PREFIX"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1122
msgid "Specifies the sysroot prefix value to use for the package. An explicitly provided prefix value will override the project-defined or default sysroot prefix value."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1130
msgid "See also |CONF_SYSROOT_PREFIX|_."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1133
msgid "LIBFOO_REVISION"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1136
msgid "Specifies a revision value for a package. When a package fetches content using source management tools, the revision value is used to determine which sources should be acquired (e.g. a tag). If a revision is not defined package, a package will use the configured |LIBFOO_VERSION|_."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1145
msgid "See also |LIBFOO_DEVMODE_REVISION|_ and |LIBFOO_VERSION|_."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1148
msgid "LIBFOO_STRIP_COUNT"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1150
msgid "Specifies the strip count to use when attempting to extract sources from an archive. By default, the extraction process will strip a single directory from an archive (value: 1). If a package's archive has no container directory, a strip count of zero can be set; likewise if an archive contains multiple container directories, a higher strip count can be set."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1161
msgid "LIBFOO_VCS_TYPE"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1164
msgid "Explicitly sets the version control system type to use when acquiring sources. releng-tool attempts to automatically determine the VCS type of a package based off a |LIBFOO_SITE|_ value. In some scenarios, a site value may be unable to specify a desired prefix/postfix. A developer can instead explicitly set the VCS type to be used no matter what the site value is configured as."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1170
msgid "Supported types are as follows:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1172
msgid "``bzr`` (Bazaar)"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1173
msgid "``cvs`` (CVS)"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1174
msgid "``git`` (Git)"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1175
msgid "``hg``  (Mercurial)"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1176
msgid "``none`` (no VCS; virtual package)"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1177
msgid "``scp`` (SCP)"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1178
msgid "``svn`` (SVN)"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1179
msgid "``url`` (URL)"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1185
msgid "If a project registers a custom extension which provides a custom VCS type, the extension type can be set in this option."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1188
msgid "Using a specific type will create a dependency for a project that the respective host tool is installed on the host system. For example, if a Git VCS-type is set, the host system will need to have ``git`` installed on the system."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1193
msgid "package post-processing"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1195
msgid "Every package, no matter which package |LIBFOO_TYPE|_ is defined, can create a post-processing script to invoke after a package has completed an installation stage. The existence of a ``<package>-post`` inside a package directory will trigger the post-processing stage for the package. An example post-processing script (``libfoo-post``) can be as follows:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1208
msgid "A post-processing script for a package is optional; thus, if a script is not provided, no post-processing will be performed for the package."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1211
#: ../../releng-tool/Documentation/developer-guide.rst:1428
msgid "See also `script helpers`_ for helper functions/variables available for use."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1216
msgid "site definitions"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1218
msgid "The following outlines the details for defining supported site definitions. If attempting to use an extension-provided site type, please consult the documentation provided by said extension."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1224
msgid "All site values can be defined with a prefix value (e.g. ``git+`` for Git sources) or postfix value; however, this is optional if a package wishes to use the |LIBFOO_VCS_TYPE|_ option."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1229
msgid "bazaar site"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1231
msgid "To define a Bazaar_-based location, the site value must be prefixed with a ``bzr+`` value. A site can be defined as follows:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1240
msgid "The value after the prefix is a path which will be provided to a ``bzr export`` call [#bzrexport]_. Content from a Bazaar repository will be fetched and archived into a file during fetch stage. Once a cached archive is made, the fetch stage will be skipped unless the archive is manually removed."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1246
msgid "cvs site"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1248
msgid "To define a CVS_-based location, the site value must be prefixed with a ``cvs+`` value. A site can be defined as follows:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1255
msgid "The value after the prefix is a space-separated pair, where the first part represents the CVSROOT [#cvsroot]_ to use and the second part specifies the CVS module [#cvsmodule]_  to use. Content from a CVS repository will be fetched and archived into a file during fetch stage. Once a cached archive is made, the fetch stage will be skipped unless the archive is manually removed."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1262
msgid "git site"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1264
msgid "To define a Git_-based location, the site value must be prefixed with a ``git+`` value or postfixed with the ``.git`` value. A site can be defined as follows:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1273
msgid "The site value (less prefix, if used) is used as a Git remote [#gitremote]_ for a locally managed cache source. Git sources will be cached inside the ``cache`` directory on first-run. Future runs to fetch a project's source will use the cached Git file system. If a desired revision exists, content will be acquired from the cache location. If a desired revision does not exist, the origin remote will be fetched for the new revision (if it exists)."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1281
msgid "mercurial site"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1283
msgid "To define a Mercurial_-based location, the site value must be prefixed with a ``hg+`` value. A site can be defined as follows:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1290
msgid "The value after the prefix is used as the ``SOURCE`` in an ``hg clone`` call [#hgclone]_. Mercurial sources will be cached inside the ``cache`` directory on first-run. Future runs to fetch a project's source will use the cached Mercurial repository. If a desired revision exists, content will be acquired from the cache location. If a desired revision does not exist, the origin remote will be pulled for the new revision (if it exists)."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1298
msgid "scp site"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1300
msgid "To define an SCP-based location, the site value must be prefixed with a ``scp+`` value. A site can be defined as follows:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1307
msgid "The value after the prefix is a path which will be provided to a ``scp`` call's [#scpcommand]_ source host value. The SCP site only supports copying a file from a remote host. The fetched file will be stored inside the ``dl`` directory. Once fetch, the fetch stage will be skipped unless the file is manually removed."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1313
msgid "svn site"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1315
msgid "To define a Subversion_-based location, the site value must be prefixed with a ``svn+`` value. A site can be defined as follows:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1322
msgid "The value after the prefix is a path which will be provided to a ``svn checkout`` call [#svncheckout]_. Content from a Subversion repository will be fetched and archived into a file during fetch stage. Once a cached archive is made, the fetch stage will be skipped unless the archive is manually removed."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1328
msgid "url site (default)"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1330
msgid "All packages that do not define a helper prefix/postfix value (as seen in other site definitions) or do not explicitly set a |LIBFOO_VCS_TYPE|_ value (other than ``url``), will be considered a URL site. A URL site can be defined as follows:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1339
msgid "The site value provided will be directly used in a URL request. URL values supported are defined by the Python's ``urlopen`` implementation [#urlopen]_, which includes (but not limited to) ``http(s)://``, ``ftp://``, ``file://`` and more."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1347
msgid "hash file"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1349
msgid "When downloading assets from a remote instance, a package's hash file can be used to help verify the integrity of any fetched content. For example, if a package lists a host with a ``my-archive.tgz`` to download, the fetch process will download the archive and verify its hash to a listed entry before continuing. If a hash does not match, the build process stops indicating an unexpected asset was downloaded."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1356
msgid "It is recommended that:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1358
msgid "Any URL-based site asset have a hash entry defined for the asset (to ensure the package sources are not corrupted or have been unexpectedly replaced)."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1360
msgid "A hash entry should exist for license files (additional sanity check if a package's license has change)."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1363
msgid "To create a hash file for a package, add a ``<my-package>.hash`` file inside the package's directory. The hash file should be a UTF-8 encoded file and can contain multiple hash entries. A hash entry is a 3-tuple defining the type of hash algorithm used, the hash value expected and the asset associated with the hash. A tuple entry is defined on a single line with each entry separated by whitespace characters. For example:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1376
msgid "Comments are permitted in the file. Lines leading with a ``#`` character or inlined leading ``#`` character after a whitespace character will be ignored."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1379
msgid "Officially supported hash types are FIPS-180 algorithms (``sha1``, ``sha224``, ``sha256``, ``sha384`` and ``sha512``) as well as (but not recommended) RSA'S MD5 algorithm. Other algorithms, while unofficially supported, can be used if provided by the system's OpenSSL library."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1384
msgid "Multiple hash entries can be provided for the same file if desired. This is to assist in scenarios where a checked out asset's content changes based on the system it is checked out on. For example, a text file checked out from Git may use Windows line-ending on Windows system, and Unix-line endings on other systems:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1396
msgid "script package (default)"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1398
msgid "A script-based package is the most basic package type available. By default, packages are considered to be script packages unless explicitly configured to be another package type (|LIBFOO_TYPE|_). If a developer wishes to explicitly configure a project as script-based, the following configuration can be used:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1407
msgid "A script package has the ability to define three Python stage scripts:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1409
msgid "``<package>-configure`` - script to invoke during the configuration stage"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1410
msgid "``<package>-build`` - script to invoke during the build stage"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1411
msgid "``<package>-install`` - script to invoke during the installation stage"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1412
msgid "``<package>-post`` - script to invoke after the installation stage"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1414
msgid "An example build script (``libfoo-build``) can be as follows:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1423
msgid "When a package performs a configuration, build or installation stage; the respective script (mentioned above) will be invoked. Package scripts are optional; thus, if a script is not provided for a stage, the stage will be skipped."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1431
msgid "autotools package"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1433
msgid "An autotools package provides support for processing a `GNU Build System`_ supported module."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1440
msgid "When an autotools package performs a configuration stage, the package may invoke ``autoreconf`` (if configured to do so) and then invoke ``configure``. When the build stage is reached, ``make`` will be invoked followed by ``make install`` during the installation stage."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1445
msgid "The following sections outline configuration options are available for an autotools package."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1449
msgid "LIBFOO_AUTOTOOLS_AUTORECONF"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1451
msgid "Specifies whether or not the package needs to perform an autotools re-configuration. This is to assist in the rebuilding of GNU Build System files which may be broken or a patch has introduced new build script changes that need to be applied. This field is optional. By default, ``autoreconf`` is not invoked."
msgstr ""

#: ../../releng-tool/Documentation/include/pkg-build-defs:2
#: ../../releng-tool/Documentation/include/pkg-build-defs:2
#: ../../releng-tool/Documentation/include/pkg-build-defs:2
msgid "LIBFOO_BUILD_DEFS"
msgstr ""

#: ../../releng-tool/Documentation/include/pkg-build-defs:4
#: ../../releng-tool/Documentation/include/pkg-build-defs:4
#: ../../releng-tool/Documentation/include/pkg-build-defs:4
msgid "Provides a means to pass definitions into the build process. This option can is defined as a dictionary of string pairs. This field is optional."
msgstr ""

#: ../../releng-tool/Documentation/include/pkg-build-env:2
#: ../../releng-tool/Documentation/include/pkg-build-env:2
#: ../../releng-tool/Documentation/include/pkg-build-env:2
msgid "LIBFOO_BUILD_ENV"
msgstr ""

#: ../../releng-tool/Documentation/include/pkg-build-env:4
#: ../../releng-tool/Documentation/include/pkg-build-env:4
#: ../../releng-tool/Documentation/include/pkg-build-env:4
msgid "Provides a means to pass environment variables into the build process. This option is defined as a dictionary with key-value pairs where the key is the environment name and the value is the environment variable's value. This field is optional."
msgstr ""

#: ../../releng-tool/Documentation/include/pkg-build-opts:2
#: ../../releng-tool/Documentation/include/pkg-build-opts:2
#: ../../releng-tool/Documentation/include/pkg-build-opts:2
msgid "LIBFOO_BUILD_OPTS"
msgstr ""

#: ../../releng-tool/Documentation/include/pkg-build-opts:4
#: ../../releng-tool/Documentation/include/pkg-build-opts:4
#: ../../releng-tool/Documentation/include/pkg-build-opts:4
msgid "Provides a means to pass command line options into the build process. This option can be defined as a dictionary of string pairs or a list with strings -- either way defined will generate argument values to include in the build event. This field is optional."
msgstr ""

#: ../../releng-tool/Documentation/include/pkg-conf-defs:2
#: ../../releng-tool/Documentation/include/pkg-conf-defs:2
msgid "LIBFOO_CONF_DEFS"
msgstr ""

#: ../../releng-tool/Documentation/include/pkg-conf-defs:4
#: ../../releng-tool/Documentation/include/pkg-conf-defs:4
msgid "Provides a means to pass definitions into the configuration process. This option can is defined as a dictionary of string pairs. This field is optional."
msgstr ""

#: ../../releng-tool/Documentation/include/pkg-conf-env:2
#: ../../releng-tool/Documentation/include/pkg-conf-env:2
msgid "LIBFOO_CONF_ENV"
msgstr ""

#: ../../releng-tool/Documentation/include/pkg-conf-env:4
#: ../../releng-tool/Documentation/include/pkg-conf-env:4
msgid "Provides a means to pass environment variables into the configuration process. This option is defined as a dictionary with key-value pairs where the key is the environment name and the value is the environment variable's value. This field is optional."
msgstr ""

#: ../../releng-tool/Documentation/include/pkg-conf-opts:2
#: ../../releng-tool/Documentation/include/pkg-conf-opts:2
msgid "LIBFOO_CONF_OPTS"
msgstr ""

#: ../../releng-tool/Documentation/include/pkg-conf-opts:4
#: ../../releng-tool/Documentation/include/pkg-conf-opts:4
msgid "Provides a means to pass command line options into the configuration process. This option can be defined as a dictionary of string pairs or a list with strings -- either way defined will generate argument values to include in the configuration event. This field is optional."
msgstr ""

#: ../../releng-tool/Documentation/include/pkg-install-defs:2
#: ../../releng-tool/Documentation/include/pkg-install-defs:2
#: ../../releng-tool/Documentation/include/pkg-install-defs:2
msgid "LIBFOO_INSTALL_DEFS"
msgstr ""

#: ../../releng-tool/Documentation/include/pkg-install-defs:4
#: ../../releng-tool/Documentation/include/pkg-install-defs:4
#: ../../releng-tool/Documentation/include/pkg-install-defs:4
msgid "Provides a means to pass definitions into the installation process. This option can is defined as a dictionary of string pairs. This field is optional."
msgstr ""

#: ../../releng-tool/Documentation/include/pkg-install-env:2
#: ../../releng-tool/Documentation/include/pkg-install-env:2
#: ../../releng-tool/Documentation/include/pkg-install-env:2
msgid "LIBFOO_INSTALL_ENV"
msgstr ""

#: ../../releng-tool/Documentation/include/pkg-install-env:4
#: ../../releng-tool/Documentation/include/pkg-install-env:4
#: ../../releng-tool/Documentation/include/pkg-install-env:4
msgid "Provides a means to pass environment variables into the installation process. This option is defined as a dictionary with key-value pairs where the key is the environment name and the value is the environment variable's value. This field is optional."
msgstr ""

#: ../../releng-tool/Documentation/include/pkg-install-opts:2
#: ../../releng-tool/Documentation/include/pkg-install-opts:2
#: ../../releng-tool/Documentation/include/pkg-install-opts:2
msgid "LIBFOO_INSTALL_OPTS"
msgstr ""

#: ../../releng-tool/Documentation/include/pkg-install-opts:4
#: ../../releng-tool/Documentation/include/pkg-install-opts:4
#: ../../releng-tool/Documentation/include/pkg-install-opts:4
msgid "Provides a means to pass command line options into the installation process. This option can be defined as a dictionary of string pairs or a list with strings -- either way defined will generate argument values to include in the installation event. This field is optional."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1489
msgid "cmake package"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1491
msgid "A CMake package provides support for processing a `CMake`_ supported module."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1493
msgid "During the configuration stage of a CMake package, ``cmake`` will be invoked to generate build files for the module. For the build stage, ``cmake --build`` will be invoked to generated build files. Similar approach for the installation stage where the build option is invoked again but with the ``install`` target invoked: ``cmake --build --target install``. Each stage can be configured to manipulate environment variables and options used by the CMake executable."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1500
msgid "The default configuration built for projects is ``RelWithDebInfo``. A developer can override this option by explicitly adjusting the configuration option ``--config`` to, for example, ``Debug``:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1518
msgid "The following sections outline configuration options are available for a CMake package."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1549
msgid "python package"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1551
msgid "A Python package provides support for processing a `Python`_ supported module."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1553
msgid "Only the build and installation phases are used when processing the sources for a Python package (i.e. no configuration stage is invoked). The build phase will invoke ``setup.py build`` while the installation stage will invoke ``setup.py install``. When a Python package is process, it will use the system's default Python interpreter. A developer can override what Python interpreter to use by configuring the ``PYTHON_INTERPRETER`` option in a package:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1564
msgid "The following sections outline configuration options are available for a Python package."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1588
msgid "LIBFOO_PYTHON_INTERPRETER"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1590
msgid "Defines a specific Python interpreter when processing the build and installation stages for a package. If not specified, the system's Python interpreter will be used. This field is optional."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1599
msgid "other"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1602
msgid "post-processing"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1606
msgid "A post-processing script (if used) will be invoked each time ``releng-tool`` reaches the final stage of a build."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1609
msgid "After each package has been processed, a project has the ability to perform post-processing. Post-processing allows a developer to cleanup the target directory, build an archive/package from generated results and more. If a project contains a ``post.py`` inside the root directory, the post-processing script will be invoked in the final stage of a build."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1615
msgid "A developer may start out with the following post-processing script ``<root>/post.py``:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1625
msgid "The above script will output the newly inserted print message at the end of a build process:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1636
msgid "A developer can take advantage of `environment variables`_ and `script helpers`_ for additional support."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1639
msgid "It is important to note that a post-processing script will be invoked each time a ``releng-tool`` invoke reaches the final stage of a build. A developer should attempt to implement the post-processing script in a way that it can be invoked multiple times. For example, if a developer decides to move a file out of the target directory into an interim directory when building an archive, it is most likely that a subsequent request to build may fail since the file can no longer be found inside the target directory."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1650
msgid "licenses"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1652
msgid "A releng-tool project can defined multiple packages, each with the possibility of having multiple licenses associated with them. Each project may vary: some may have only proprietary sources and may not care about tracking this information; some may only use open source software and require to populate license information for a final package; or a mix."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1658
msgid "When license information is populated for a project, each project's license information (|LIBFOO_LICENSE_FILES|_) is will be populated into a single license document. If a developer defines the |CONF_LICENSE_HEADER|_ configuration, the generated document will be prefixed with the header content. For example, ``releng.py`` can be configured to prepare a license header from a local file ``assets/license-header.tpl``:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1680
msgid "A side note is that licenses for a project are generated before the `post-processing`_ phase; hence, generated license document(s) may be included when attempting to generated final archives/packages."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1685
msgid "patching"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1689
msgid "Patches are ignored when in :ref:`development mode` for packages with a development version revision or when in :ref:`local-sources mode` for internal packages."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1693
msgid "The patching stage for a package provides the ability for a developer to apply one or more patches to extracted sources. A project may define an external package which fetches an archive that is not maintained by the project owners. The fetched source may not be able to build in a developer's releng-tool project due to limitations of the implementation or build scripts provided by the package. A developer can prepare a series of patches to apply to a package and submit changes upstream to correct the issue; however, the developer is then left to either wait for the changes to be merged in or needs to make a custom archive with the appropriate modifications already applied. To avoid this, a developer can include patches directly in the package folder to be automatically applied during patching stage."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1705
msgid "When a package's patch stage is reached, releng-tool will look for patches found inside the package folder with the extension ``.patch``. Patches found inside a package folder are applied in ascending order. It is recommended to prefix patch filenames with a numerical value for clarity. For example, the following package patches:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1721
msgid "With be applied in the following order:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1723
msgid "``0001-accept-linker-flags.patch``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1724
msgid "``0002-correct-output-path.patch``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1725
msgid "``0003-support-disabling-test-build.patch``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1727
msgid "If a user configures their build environment in :ref:`development mode`, patches will not be applied if a package defines a development revisions. The idea is that a development revision is most likely the bleeding edge source of a package and does not need any patches. If a user configures their build environment in :ref:`local-sources mode` and a package is defined as internal, patches will not be applied to the sources. This is to prevent the patching system from making unexpected modifications to a developer's local source variants."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1737
msgid "internal and external packages"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1739
msgid "Packages are either internal packages or external packages. All packages are considered external packages by default unless explicitly configured as internal through either the package option |LIBFOO_INTERNAL|_ or using the project configuration |CONF_DEFAULT_INTERN|_ (see also |LIBFOO_EXTERNAL|_). Both package types are almost treated the same except for the following:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1745
msgid "An internal package will not generate output warnings if the package is missing :ref:`hash information <hash_files>`."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1747
msgid "An internal package will not generate output warnings if the package is missing :ref:`license information <license_information>`."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1749
msgid "When configured for :ref:`development mode`; the patch stage will not be performed if the package specifies a development revision (|LIBFOO_DEVMODE_REVISION|_)."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1752
msgid "When configured for :ref:`local-sources mode`; the fetch, extract and patch stages will not be performed."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1756
msgid "script helpers"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1758
msgid "releng-tool provides a series of helper functions which can be used in script-based packages, post-processing and more. Helper functions provided are listed below:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1763
msgid "method"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1763
msgid "documentation"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1765
msgid "``debug``"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.debug:1
msgid "log a debug message"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.debug:3
msgid "Logs a debug message to standard out with a trailing new line. By default, debug messages will not be output to standard out unless the instance is configured with debugging enabled."
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.debug:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.err:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.log:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.note:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathCopy:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.execute:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathExists:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.platform.exit:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.string.expand:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathMove:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathRemove:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.generateTempDir:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.touch:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.interimWorkingDirectory:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.success:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.verbose:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.warn:0
msgid "Parameters"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.debug:11
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.err:10
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.log:9
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.note:10
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.success:10
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.verbose:11
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.warn:10
msgid "the message"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.debug:12
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.err:11
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.log:10
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.note:11
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.success:11
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.verbose:12
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.warn:11
msgid "an arbitrary set of positional and keyword arguments used when generating a formatted message"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1769
msgid "``err``"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.err:1
msgid "log an error message"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.err:3
msgid "Logs an error message to standard error with a trailing new line and (if enabled) a red colorization."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1773
msgid "``log``"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.log:1
msgid "log a message"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.log:3
msgid "Logs a (normal) message to standard out with a trailing new line."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1777
msgid "``note``"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.note:1
msgid "log a notification message"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.note:3
msgid "Logs a notification message to standard out with a trailing new line and (if enabled) an inverted colorization."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1781
msgid "``releng_copy``"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathCopy:1
msgid "copy a file or directory into a target file or directory"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathCopy:3
msgid "This call will attempt to copy a provided file or directory, defined by ``src`` into a destination file or directory defined by ``dst``. If ``src`` is a file, then ``dst`` is considered to be a file or directory; if ``src`` is a directory, ``dst`` is considered a target directory. If a target directory or target file's directory does not exist, it will be automatically created. In the event that a file or directory could not be copied, an error message will be output to standard error (unless ``quiet`` is set to ``True``). If ``critical`` is set to ``True`` and the specified file/directory could not be copied for any reason, this call will issue a system exit (``SystemExit``)."
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathCopy:14
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.execute:39
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathExists:6
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.platform.exit:12
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.string.expand:15
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathMove:16
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathRemove:9
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.generateTempDir:9
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.touch:7
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.interimWorkingDirectory:9
msgid "An example when using in the context of script helpers is as follows:"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathCopy:36
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathMove:32
msgid "the source directory or file"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathCopy:37
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathMove:33
msgid "the destination directory or file\\* (\\*if ``src`` is a file)"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathCopy:38
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathMove:34
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathRemove:18
msgid "whether or not to suppress output"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathCopy:40
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathMove:36
msgid "whether or not to stop execution on failure"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathCopy:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.execute:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathExists:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.string.expand:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathMove:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathRemove:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.touch:0
msgid "Returns"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathCopy:43
msgid "``True`` if the copy has completed with no error; ``False`` if the copy has failed"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathCopy:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.execute:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.platform.exit:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathMove:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.generateTempDir:0
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.interimWorkingDirectory:0
msgid "Raises"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathCopy:46
#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathMove:42
msgid "if the copy operation fails with ``critical=True``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1785
msgid "``releng_execute``"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.execute:1
msgid "execute the provided command/arguments"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.execute:3
msgid "Runs the command described by ``args`` until completion. A caller can adjust the working directory of the executed command by explicitly setting the directory in ``cwd``. The execution request will return ``True`` on a successful execution; ``False`` if an issue has been detected (e.g. bad options or called process returns a non-zero value). In the event that the execution fails, an error message will be output to standard error unless ``quiet`` is set to ``True``."
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.execute:11
msgid "The environment variables used on execution can be manipulated in two ways. First, the environment can be explicitly controlled by applying a new environment content using the ``env`` dictionary. Key of the dictionary will be used as environment variable names, whereas the respective values will be the respective environment variable's value. If ``env`` is not provided, the existing environment of the executing context will be used. Second, a caller can instead update the existing environment by using the ``env_update`` option. Like ``env``, the key-value pairs match to respective environment key-value pairs. The difference with this option is that the call will use the original environment values and update select values which match in the updated environment request. When ``env`` and ``env_update`` are both provided, ``env_update`` will be updated the options based off of ``env`` instead of the original environment of the caller."
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.execute:25
msgid "If ``critical`` is set to ``True`` and the execution fails for any reason, this call will issue a system exit (``SystemExit``). By default, the critical flag is enabled (i.e. ``critical=True``)."
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.execute:29
msgid "In special cases, an executing process may not provide carriage returns/new lines to simple output processing. This can lead the output of a process to be undesirably buffered. To workaround this issue, the execution call can instead poll for output results by using the ``poll`` option with a value of ``True``. By default, polling is disabled with a value of ``False``."
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.execute:35
msgid "A caller may wish to capture the provided output from a process for examination. If a list is provided in the call argument ``capture``, the list will be populated with the output provided from an invoked process."
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.execute:45
msgid "the list of arguments to execute"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.execute:46
msgid "working directory to use"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.execute:48
msgid "environment variables to use for the process"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.execute:50
msgid "environment variables to append for the process"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.execute:52
msgid "whether or not to suppress output (defaults to ``False``)"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.execute:55
msgid "whether or not to stop execution on failure (defaults to ``True``)"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.execute:58
msgid "force polling stdin/stdout for output data (defaults to ``False``)"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.execute:61
msgid "list to capture output into"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.execute:64
msgid "``True`` if the execution has completed with no error; ``False`` if the execution has failed"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.execute:67
msgid "if the execution operation fails with ``critical=True``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1789
msgid "``releng_exists``"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathExists:1
msgid "return whether or not the path exists"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathExists:3
msgid "Allows a caller to verify the existence of a file on the file system. This cal will return ``True`` if the path exists; ``False`` otherwise."
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathExists:15
msgid "the path"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathExists:16
msgid "additional path parts"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathExists:18
msgid "``True`` if the path exists; ``False`` otherwise"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1793
msgid "``releng_exit``"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.platform.exit:1
msgid "exit out of the releng-tool process"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.platform.exit:3
msgid "Provides a convenience method to help invoke a system exit call without needing to explicitly use ``sys``. A caller can provide a message to indicate the reason for the exit. The provide message will output to standard error. The exit code, if not explicit set, will vary on other arguments. If a message is provided to this call, the default exit code will be ``1``. If no message is provided, the default exit code will be ``0``. In any case, if the caller explicitly sets a code value, the provided code value will be used."
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.platform.exit:18
msgid "error message to print"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.platform.exit:20
msgid "exit code; defaults to 0 if no message or defaults to 1 if a message is set"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.platform.exit:24
msgid "always raised"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1797
msgid "``releng_expand``"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.string.expand:1
msgid "perform variable expansion on strings"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.string.expand:3
msgid "This expand utility method will attempt to expand variables in detected string types. For a detected string which contains substrings in the form of ``$value`` or ``${value}``, these substrings will be replaced with their respective key-value (if provided) or environment variable value. For substrings which do not have a matching variable value, the substrings will be replaced with an empty value. If a dictionary is provided, keys and values will be checked if they can be expanded on. If a list/set is provided, each value which be checked if it can be expanded on. If a dictionary key is expanded to match another key, a key-value pair can be dropped. If a set may result in a smaller set if expanded values result in duplicate entries."
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.string.expand:27
msgid "the object"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.string.expand:28
msgid "key-values pairs to use"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.string.expand:31
msgid "the expanded object"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1801
msgid "``releng_join``"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1806
msgid "An alias for |os.path.join|_."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1808
msgid "``releng_move``"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathMove:1
msgid "move a file or directory into a target file or directory"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathMove:3
msgid "This call will attempt to move a provided file or directory's contents, defined by ``src`` into a destination file or directory defined by ``dst``. If ``src`` is a file, then ``dst`` is considered to be a file or directory; if ``src`` is a directory, ``dst`` is considered a target directory. If a target directory or target file's directory does not exist, it will be automatically created."
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathMove:10
msgid "In the event that a file or directory could not be moved, an error message will be output to standard error (unless ``quiet`` is set to ``True``). If ``critical`` is set to ``True`` and the specified file/directory could not be moved for any reason, this call will issue a system exit (``SystemExit``)."
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathMove:39
msgid "``True`` if the move has completed with no error; ``False`` if the move has failed"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1812
msgid "``releng_remove``"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathRemove:1
msgid "remove the provided path"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathRemove:3
msgid "Attempts to remove the provided path if it exists. The path value can either be a directory or a specific file. If the provided path does not exist, this method has no effect. In the event that a file or directory could not be removed due to an error other than unable to be found, an error message will be output to standard error (unless ``quiet`` is set to ``True``)."
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathRemove:17
msgid "the path to remove"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.pathRemove:21
msgid "``True`` if the path was removed or does not exist; ``False`` if the path could not be removed from the system"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1816
msgid "``releng_tmpdir``"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.generateTempDir:1
msgid "generate a context-supported temporary directory"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.generateTempDir:3
msgid "Creates a temporary directory in the provided directory ``dir`` (or system default, is not provided). This is a context-supported call and will automatically remove the directory when completed. If the provided directory does not exist, it will created. If the directory could not be created, an ``FailedToPrepareBaseDirectoryError`` exception will be thrown."
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.generateTempDir:16
msgid "the directory to create the temporary directory in"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.generateTempDir:19
msgid "the base directory does not exist and     could not be created"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1820
msgid "``releng_touch``"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.touch:1
msgid "update a file's access/modifications times"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.touch:3
msgid "Attempts to update the access/modifications times on a file. If the file does not exist, it will be created. This utility call operates in the same fashion as the ``touch`` system command."
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.touch:16
msgid "the file"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.touch:18
msgid "``True`` if the file was created/updated; ``False`` if the file could not be created/updated"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1824
msgid "``releng_wd``"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.interimWorkingDirectory:1
msgid "move into a context-supported working directory"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.interimWorkingDirectory:3
msgid "Moves the current context into the provided working directory ``dir``. When returned, the original working directory will be restored. If the provided directory does not exist, it will created. If the directory could not be created, an ``FailedToPrepareWorkingDirectoryError`` exception will be thrown."
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.interimWorkingDirectory:18
msgid "the target working directory"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.io.interimWorkingDirectory:20
msgid "the working directory does not     exist and could not be created"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1828
msgid "``success``"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.success:1
msgid "log a success message"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.success:3
msgid "Logs a success message to standard error with a trailing new line and (if enabled) a green colorization."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1832
msgid "``verbose``"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.verbose:1
msgid "log a verbose message"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.verbose:3
msgid "Logs a verbose message to standard out with a trailing new line and (if enabled) an inverted colorization. By default, verbose messages will not be output to standard out unless the instance is configured with verbosity."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1836
msgid "``warn``"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.warn:1
msgid "log a warning message"
msgstr ""

#: ../../releng-tool/releng/__init__.py:docstring of releng.util.log.warn:3
msgid "Logs a warning message to standard error with a trailing new line and (if enabled) a purple colorization."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1844
msgid "Scripts directly invoked by releng-tool will automatically have these helpers registered in the script's globals module (i.e. no import is necessary). If a project defines custom Python modules in their project and wishes to take advantage of these helper functions, the following import can be used to, for example, import a specific function:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1854
msgid "Or, if desired, all helper methods can be imported at once:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1861
msgid "vcs ignore"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1863
msgid "When invoking releng-tool on a project, the project's root directory will be populated with cached assets and other output files. A series of standard ignore patterns can be applied to a repository to prevent observing these generated files using VCS tools. The following is an example ignore configuration which can be applied for Git-based repositories (via ``.gitignore``):"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1880
msgid "quirks"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1882
msgid "The following outlines a series of configuration |CONF_QUIRKS|_ that can be applied to deal with rare host environment scenarios."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1885
msgid "``releng.cmake.disable_parallel_option`` -- Disables the ``--parallel`` option from being injected when a CMake-package is performing a build stage. This is to help support host systems running variants of CMake which do not explicitly provide a parallelization option."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1890
msgid "Quirks are enabled through a configuration (override) script such as follows:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1899
msgid "loading extensions"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1903
msgid "If looking for information on developing extensions for releng-tool, consult the :ref:`contributor's guide -- extensions <contributor_guide_ext>`."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1906
msgid "A releng-tool project can define one or more extensions to load for externally implemented capabilities. For example, a project can load extensions ``ext-a`` and ``ext-b`` with the following defined in their project's configuration:"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1918
msgid "During the initial stages of a release engineering process, releng-tool will check and load any configured extension. In the event that an extension is missing, is unsupported for the running releng-tool version or fails to load, a detailed error message will be presented to the user."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1923
msgid "While the ability to load extensions is supported, capabilities provided by extensions are not officially supported by releng-tool. For issues related to specific extension use, it is recommended to consult the documentation provided by the providers of said extensions."
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1930
msgid "http://doc.bazaar.canonical.com/bzr.2.7/en/user-reference/export-help.html"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1931
msgid "https://www.gnu.org/software/trans-coord/manual/cvs/html_node/checkout.html#checkout"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1932
msgid "https://www.gnu.org/software/trans-coord/manual/cvs/html_node/Specifying-a-repository.html"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1933
msgid "https://git-scm.com/docs/git-remote"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1934
msgid "https://www.selenic.com/mercurial/hg.1.html#clone"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1935
msgid "https://linux.die.net/man/1/scp"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1936
msgid "http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.checkout.html"
msgstr ""

#: ../../releng-tool/Documentation/developer-guide.rst:1937
msgid "https://docs.python.org/3.7/library/urllib.request.html#urllib.request.urlopen"
msgstr ""
