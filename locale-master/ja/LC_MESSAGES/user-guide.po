# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019 releng-tool
# This file is distributed under the same license as the releng-tool
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: releng-tool \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-27 21:14-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../releng-tool/Documentation/user-guide.rst:2
msgid "user guide"
msgstr "ユーザーガイド"

#: ../../releng-tool/Documentation/user-guide.rst:4
msgid ""
"The following will outline the capabilities on using releng-tool with an "
"already defined project. For details on building a releng-tool project, "
"consult the :doc:`developer's guide <developer-guide>`."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:9
msgid "getting started"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:11
msgid ""
"Depending on the host and how releng-tool has been :doc:`installed "
"<install>`, the tool can be either executed using the call ``releng-"
"tool`` (if supported) or explicitly through a Python invoke ``python -m "
"releng``. This guide will assume the former option is available for use. "
"If the alias command is not available on the host system, the latter call"
" can be used instead."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:17
msgid ""
"A releng-tool project will be defined by a ``releng.py`` configuration "
"file along with one or more packages found inside a ``package/`` folder. "
"This location can be referred to as the \"root directory\". When invoking"
" ``releng-tool``, the tool will look into the current working directory "
"for the project information to process. For example, if a project found "
"inside ``my-project`` with the single package ``package-a`` defined, the "
"following output may be observed:"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:37
msgid ""
"On a successful execution, it is common that the release engineering "
"process will have an asset (or multiple) generated into a ``images/`` "
"location; however, it is up to the developer of a releng-tool project to "
"decide where generated files will be stored."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:42
msgid ""
"If a user wishes to pass the directory of a project location via command "
"line, the argument ``--root-dir`` can be used:"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:50
msgid ""
"For a complete list of actions and other argument options provided by the"
" tool, the ``--help`` option can be used to show this information:"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:58
msgid "arguments"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:60
msgid ""
"The command line can be used to specify either a single action to perform"
" and/or provide various options to configure the release engineering "
"process. Options can be provided before or after an action (if provided)."
" By default, if a user does not specify an action, it is assumed that all"
" release engineering steps are to be performed. An example of a user "
"invoking a clean action is as follows:"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:70
msgid "The following outlines available actions:"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:75
msgid "``clean``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:75
msgid ""
"Clean (removes) a series of folders holding content such as extracted "
"archives, built libraries and more. Images and downloaded assets/cache "
"are not removed (see |ACTION_MRPROPER|_ for a more through all cleaning "
"operation). This clean operation will remove files based off the "
"configured output directory. If an output directory is provided (i.e. "
"``--out-dir <dir>``) during a clean event, select folders inside this "
"directory will be removed instead of the output directory (if any) found "
"in the root directory."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:87
msgid "``extract``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:87
msgid ""
"The release engineering process will process all packages up to the "
"extraction phase (inclusive)."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:90
msgid "``fetch``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:90
msgid ""
"The release engineering process will process all packages up to the fetch"
" phase (inclusive; see also `offline builds`_)."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:94
msgid "``licenses``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:94
msgid ""
"A request to generate all license information for the project. Note that "
"license information requires acquiring license documents from packages. "
"Therefore, packages will be fetched/extracted if not already done."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:102
msgid "``mrproper``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:102
msgid ""
"Perform a pristine clean of the releng-tool project. This request removes"
" the ``output/`` directory found in the root directory as well as any "
"mode file flags which may be set. The ``cache/`` and ``dl/`` directories "
"will remain untouched. See also the |ACTION_CLEAN|_ action."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:109
msgid "``patch``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:109
msgid ""
"The release engineering process will process all packages up to the patch"
" phase (inclusive)."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:112
msgid "``<pkg>-build``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:112
msgid ""
"Performs the build stage for the package. On success, the specified "
"package stage will have completed its build. If a package has any package"
" dependencies, these dependencies will be processed before the specified "
"package. If the provided package name does not exist, a notification will"
" be generated."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:120
msgid "``<pkg>-clean``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:120
msgid "Cleans the build directory for package (if it exists)."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:123
msgid "``<pkg>-configure``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:123
msgid ""
"Performs the configure stage for the package. On success, the specified "
"package stage will have completed its configuration stage. If a package "
"has any package dependencies, these dependencies will be processed before"
" the specified package. If the provided package name does not exist, a "
"notification will be generated."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:131
msgid "``<pkg>-extract``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:131
msgid ""
"Performs the extraction stage for the package. On success, the specified "
"package stage will have completed its extraction stage. If the provided "
"package name does not exist, a notification will be generated."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:137
msgid "``<pkg>-fetch``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:137
msgid ""
"Performs the fetch stage for the package. On success, the specified "
"package stage will have completed its fetch stage. If the provided "
"package name does not exist, a notification will be generated."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:143
msgid "``<pkg>-install``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:143
msgid ""
"Performs the installation stage for the package. On success, the "
"specified package stage will have completed its installation stage. If a "
"package has any package dependencies, these dependencies will be "
"processed before the specified package. If the provided package name does"
" not exist, a notification will be generated."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:151
msgid "``<pkg>-patch``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:151
msgid ""
"Performs the patch stage for the package. On success, the specified "
"package stage will have completed its patch stage. If the provided "
"package name does not exist, a notification will be generated."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:157
msgid "``<pkg>-rebuild``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:157
msgid ""
"Force a rebuild of a specific package. Once a package has been built, the"
" package will not attempt to be built again. Invoking a rebuild request "
"will tell releng-tool to re-invoke the build step again. This can be "
"useful during times of development where a developer attempts to change a"
" package definition or sources between build attempts. If using this "
"action, please ensure `understanding rebuilds`_ has been read to "
"understand this action's effect."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:167
msgid "``<pkg>-reconfigure``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:167
msgid ""
"Force a re-configuration of a specific package. Once a package has been "
"configured, the package will not attempt to configure it again. Invoking "
"a re-configuration request will tell releng-tool to re-invoke the "
"configuration step again. This can be useful during times of development "
"where a developer attempts to change a package definition or sources "
"between configuration attempts. If using this action, please ensure "
"`understanding rebuilds`_ has been read to understand this action's "
"effect."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:178
msgid "``<pkg>-reinstall``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:178
msgid ""
"Force a re-installation of a specific package. Once a package has been "
"installed, the package will not attempt to install it again. Invoking a "
"re-installation request will tell releng-tool to re-invoke the "
"installation step again. This can be useful during times of development "
"where a developer attempts to change a package definition or sources "
"between installation attempts. If using this action, please ensure "
"`understanding rebuilds`_ has been read to understand this action's "
"effect."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:193
msgid "The following outlines available options:"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:196
msgid "``--cache-dir <dir>``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:196
msgid ""
"Directory for distributed version control cache information (defaults to "
"``<root>/cache``)."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:199
msgid "``--debug``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:199
msgid "Show debug-related messages."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:201
msgid "``-D``, ``--development``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:201
msgid "Enables `development mode`_."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:203
msgid "``--dl-dir <dir>``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:203
msgid "Directory for download archives (defaults to ``<root>/dl``)."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:206
msgid "``-h``, ``--help``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:206
msgid "Show this help."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:208
msgid "``-j``, ``--jobs <jobs>``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:208
msgid "Numbers of jobs to handle (default to ``0``; automatic)."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:211
msgid "``--local-sources``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:211
msgid "Enables `local-sources mode`_."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:213
msgid "``--nocolorout``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:213
msgid "Explicitly disable colorized output."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:215
msgid "``--out-dir <dir>``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:215
msgid ""
"Directory for output (builds, images, etc.; defaults to "
"``<root>/output``)."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:218
msgid "``--root-dir <dir>``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:218
msgid ""
"Directory to process a releng-tool project (defaults to the working "
"directory)."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:221
msgid "``-V``, ``--verbose``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:221
msgid "Show additional messages."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:223
msgid "``--version``"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:223
msgid "Show releng-tool's version."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:227
msgid "understanding rebuilds"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:229
msgid ""
"As packages are processed in order (based off of detected dependencies, "
"if any), each package will go through their respective stages: fetching, "
"extraction, patching, configuration, building and installation. While a "
"package may not take advantage of each stage, the releng-tool will step "
"through each stage to track its progress. Due to the vast number of ways "
"a package can be defined, the ability for releng-tool to determine when a"
" previously executed stage is \"stale\" is non-trivial. Instead of "
"attempting to manage \"stale\" package stages, releng-tool leaves the "
"responsibility to the builder to deal with these scenarios. This idea is "
"important for developers to understand how it is possible to perform "
"rebuilds of packages to avoid a full rebuild of the entire project."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:241
msgid ""
"Consider the following example: a project has three packages "
"``module-a``, ``module-b`` and ``module-c`` which are C++-based. For this"
" example, project ``module-b`` depends on ``module-a`` and project "
"``module-c`` depends on ``module-b``; therefore, releng-tool will process"
" packages in the order ``module-a -> module-b-> module-c``. In this "
"example, the project is building until a failure is detected in package "
"``module-c``:"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:255
msgid ""
"A developer notices that it is due to an issue found in ``module-b``; "
"however, instead of attempting to redo everything from a fresh start, the"
" developer wishes to test the process by manually making the change in "
"``module-b`` to complete the build process. The developer makes the "
"change, re-invokes ``releng-tool`` but still notices the build error "
"occurs:"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:266
msgid ""
"The issue here is that since ``module-b`` has already been processed, "
"none of the interim changes made will be available for ``module-c`` to "
"use. To take advantage of the new implementation in ``module-b``, the "
"builder can signal for the updated package to be rebuilt:"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:276
msgid ""
"With ``module-b`` in a more desired state, a re-invoke of ``releng-tool``"
" could allow ``module-c`` to be built."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:284
msgid ""
"This is a very simple example to consider, and attempts to rebuild can "
"vary based on the packages, changes and languages used."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:288
msgid "tips"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:291
msgid "offline builds"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:293
msgid "A user can prepare for an offline build by using the ``fetch`` action:"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:299
msgid ""
"Package content will be downloaded into the respective ``dl/`` and/or "
"``cache/`` folders. Future builds for the project will no longer need "
"external access until these folders are manually removed."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:304
msgid "parallel builds"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:306
msgid ""
"A stage (such as a build stage) for a package can take advantage of "
"multiple cores to perform the step. By default, releng-tool will attempt "
"to run as many jobs for a stage equal to the amount of physical cores on "
"the host system. The amount of jobs available for a stage can be "
"configured using the ``--jobs`` argument. For example, if a user wishes "
"to override the amount of jobs attempted for stages to two jobs, the "
"following can be used:"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:317
msgid ""
"Note that a developer may restrict the amount of jobs allowed for a "
"specific package if a package cannot support parallel processing."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:321
msgid "privileged builds"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:323
msgid ""
"It is never recommended to invoke a build with elevated (e.g. root) "
"privileges. A builder invoking in an elevated environment runs the risk "
"of a misconfigured releng-tool project dirtying or destroying the "
"builder's host environment."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:328
msgid "license generation"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:330
msgid ""
"At the end of a ``releng-tool`` invoke, the final stages will compile a "
"list of package license information (if licenses are defined). If a user "
"wishes to compile a project's list of license information without "
"performing an entire build, the ``licenses`` action can be used:"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:339
msgid ""
"License information can then be found in the root directory's "
"``<root>/licenses`` folder."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:343
msgid "advanced builder capabilities"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:348
msgid "development mode"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:350
msgid ""
"Development mode provides a way for builder to request to process "
"supported packages against a development version of sources rather than "
"using fixed versions. Consider the following example: if a project has a "
"package which sources are pulled from a Git repository, it is most likely"
" the package definition will define the explicit tag to clone from (e.g. "
"``v1.0``). However, a package may define that the ``master`` branch of a "
"repository is used for the most recent development revision. If an "
"environment is configured for development mode, the releng-tool process "
"will instead pull sources from the ``master`` branch instead of a release"
" tag."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:360
msgid ""
"To enable development mode, invoking ``releng-tool`` with the "
"``--development`` argument will enable the mode. Future calls to releng-"
"tool for the project will use the development revision for packages where"
" define. For example:"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:372
msgid ""
"Development mode is persisted through the use of a file flag in the root "
"directory. A user can either disable development mode by performing a "
"|ACTION_MRPROPER|_ or can manually remove the file flag."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:379
msgid "local-sources mode"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:383
msgid ""
"Clean events (such as ``releng-tool clean``) will not touch packages "
"using sources found alongside the output directory"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:386
msgid ""
"Local-sources mode provides a way for a developer to build internal-"
"flagged packages using sources found alongside the root directory instead"
" of having releng-tool attempt to fetch them from remote instances. This "
"is primarily for developers who desire to manually manage source content "
"outside the releng-tool environment. Local-sources mode only works for "
"internally flagged packaged. Consider the following example: a releng-"
"tool project has a package called ``liba``. When releng-tool is invoked "
"in normal configurations, the package will do fetching, extraction and "
"patching to prepare the directory ``<root>/output/build/liba-<version>``."
" However, if a builder has configured the working root for local-sources "
"mode, sources for ``liba`` will be checked at the folder "
"``<root>/../liba`` instead. Also, when in local-sources mode, an internal"
" package will skip the fetching, extraction and patching stages in order "
"to prevent undesired manipulation of developer-prepared sources. Another "
"consideration to note is the use of clean operators while in local-"
"sources mode. Continuing with the above example, if a user invokes "
"``releng-tool liba-clean``, the operation will not remove the "
"``<root>/../liba`` folder. Responsibility to managing a clean ``liba`` "
"package will be left with the user."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:404
msgid ""
"To enable local-sources mode, invoking ``releng-tool`` with the "
"``--local-sources`` argument will enable the mode. Future calls to "
"releng-tool for the project will use local sources for packages defined "
"as internal packages. For example:"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:417
msgid ""
"Local-sources mode is persisted through the use of a file flag in the "
"root directory. A user can either disable local sources mode by "
"performing a |ACTION_MRPROPER|_ or can manually remove the file flag."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:424
msgid "configuration overrides"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:426
msgid ""
"While it is not recommended to have users manually modify a project's "
"configuration, a series of override options exist to deal with unique "
"build scenarios. If a builder needs to override a tool location or "
"package site, a user and define either environment options or setup a "
"configuration override script ``releng-overrides.py``. It is never "
"recommended to persist a configuration overrides file into a project's "
"source repository."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:434
msgid "extraction tool overrides"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:436
msgid ""
"The ``override_extract_tools`` option inside a configuration override "
"script allows a dictionary to be provided to map an extension type to an "
"external tool to indicate which tool should be used for extraction. For "
"example, when a ``.zip`` archive is being processed for extraction, "
"releng-tool will internally extract the archive; however, a user may wish"
" to override this tool with their own extraction utility. Consider the "
"following example:"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:450
msgid "revision overrides"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:452
msgid ""
"The ``override_revisions`` option inside a configuration override script "
"allows a dictionary to be provided to map a package name to a new "
"revision value. Consider the following example: a project defines "
"``module-a`` and ``module-b`` packages with package ``module-b`` "
"depending on package ``module-a``. A developer may be attempting to tweak"
" package ``module-b`` on the fly to test a new capabilities against the "
"current stable version of ``module-a``; however, the developer does not "
"want to explicitly change the revision inside package ``module-b``'s "
"definition. To avoid this, an override can be used instead:"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:467
msgid ""
"The above example shows that package ``module-b`` will fetch using a test"
" branch instead of what is defined in the actual package definition."
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:471
msgid "site overrides"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:473
msgid ""
"The ``override_sites`` option inside a configuration override script "
"allows a dictionary to be provided to map a package name to a new site "
"value. There may be times where a host may not have access to a specific "
"package site. To have a host to use a mirror location without having to "
"adjust the package definition, the site override option can be used. For "
"example, consider a package pulls from site "
"``git@example.com:myproject.git``; however, the host ``example.com`` "
"cannot be access from the host machine. If a mirror location has been "
"setup at ``git@example.org:myproject.git``, the following override can be"
" used:"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:489
msgid "tool overrides"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:491
msgid ""
"Environment variables can be used to help override external tool invoked "
"by the releng-tool process. For example, when invoking CMake-based "
"projects, the tool ``cmake`` will be invoked; however, if a builder is "
"running on CentOS and CMake v3.x is desired, the tool ``cmake3`` needs to"
" be invoked instead. To configure this, an environment variable can be "
"set to switch which tool to invoke. Consider the following example:"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:505
msgid "quirks"
msgstr ""

#: ../../releng-tool/Documentation/user-guide.rst:507
msgid ""
"releng-tool also provides a series of configuration quirks to deal with "
"rare host environment scenarios where releng-tool may be experiencing "
"issues. See :ref:`configuration quirks <quirks>` for more information."
msgstr ""

#~ msgid ""
#~ "Clean (remove) the ``output/`` directory "
#~ "found in the root directory. This "
#~ "clean operation will remove content such"
#~ " as extracted archives, built libraries "
#~ "and more. Downloaded assets/cache files "
#~ "are not removed (instead see "
#~ "``mrproper``). If an output directory is"
#~ " provided (i.e. ``--out-dir <dir>``) "
#~ "during a clean event, the provided "
#~ "directory will be removed instead of "
#~ "the output directory (if any) found "
#~ "in the root directory. If no "
#~ "output directory exists, this call will"
#~ " have no effect."
#~ msgstr ""

#~ msgid ""
#~ "Perform a pristine clean of the "
#~ "releng-tool project. This request not "
#~ "only removes the targeted output "
#~ "directory but also any cached assets "
#~ "and mode file flags (see also "
#~ "``clean``)."
#~ msgstr ""

#~ msgid ""
#~ "Package content will be downloaded into"
#~ " the respective ``dl/`` and/or ``cache/``"
#~ " folders. Future builds for the "
#~ "project will no longer need external "
#~ "access until these folders are manually"
#~ " removed or ``mrproper`` is invoked."
#~ msgstr ""

#~ msgid ""
#~ "Development mode is persisted through "
#~ "the use of a file flag in "
#~ "the root directory. A user can "
#~ "either disable development mode by "
#~ "performing a ``mrproper`` or can "
#~ "manually remove the file flag."
#~ msgstr ""

#~ msgid ""
#~ "Local-sources mode is persisted through"
#~ " the use of a file flag in "
#~ "the root directory. A user can "
#~ "either disable local sources mode by "
#~ "performing a ``mrproper`` or can "
#~ "manually remove the file flag."
#~ msgstr ""

